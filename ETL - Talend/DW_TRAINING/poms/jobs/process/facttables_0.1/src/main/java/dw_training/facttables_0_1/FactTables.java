// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dw_training.facttables_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: FactTables Purpose: Job for filling in fact tables<br>
 * Description: Job for filling in fact tables <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class FactTables implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "FactTables";
	private final String projectName = "DW_TRAINING";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				FactTables.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(FactTables.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_AMOS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class dbLoadingStruct implements routines.system.IPersistableRow<dbLoadingStruct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String AIMS_aircraftregistration;

				public String getAIMS_aircraftregistration () {
					return this.AIMS_aircraftregistration;
				}
				
			    public Integer AIMS_flighthours;

				public Integer getAIMS_flighthours () {
					return this.AIMS_flighthours;
				}
				
			    public Integer AIMS_flightcycles;

				public Integer getAIMS_flightcycles () {
					return this.AIMS_flightcycles;
				}
				
			    public Integer AIMS_delays;

				public Integer getAIMS_delays () {
					return this.AIMS_delays;
				}
				
			    public Integer AIMS_delayedminutes;

				public Integer getAIMS_delayedminutes () {
					return this.AIMS_delayedminutes;
				}
				
			    public Integer AIMS_cancellations;

				public Integer getAIMS_cancellations () {
					return this.AIMS_cancellations;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Integer AMOS_scheduledoutofservice;

				public Integer getAMOS_scheduledoutofservice () {
					return this.AMOS_scheduledoutofservice;
				}
				
			    public Integer AMOS_unscheduledoutofservice;

				public Integer getAMOS_unscheduledoutofservice () {
					return this.AMOS_unscheduledoutofservice;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.date = readDate(dis);
					
						this.AMOS_scheduledoutofservice = readInteger(dis);
					
						this.AMOS_unscheduledoutofservice = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.date = readDate(dis);
					
						this.AMOS_scheduledoutofservice = readInteger(dis);
					
						this.AMOS_unscheduledoutofservice = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.AMOS_scheduledoutofservice,dos);
					
					// Integer
				
						writeInteger(this.AMOS_unscheduledoutofservice,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.AMOS_scheduledoutofservice,dos);
					
					// Integer
				
						writeInteger(this.AMOS_unscheduledoutofservice,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AIMS_aircraftregistration="+AIMS_aircraftregistration);
		sb.append(",AIMS_flighthours="+String.valueOf(AIMS_flighthours));
		sb.append(",AIMS_flightcycles="+String.valueOf(AIMS_flightcycles));
		sb.append(",AIMS_delays="+String.valueOf(AIMS_delays));
		sb.append(",AIMS_delayedminutes="+String.valueOf(AIMS_delayedminutes));
		sb.append(",AIMS_cancellations="+String.valueOf(AIMS_cancellations));
		sb.append(",date="+String.valueOf(date));
		sb.append(",AMOS_scheduledoutofservice="+String.valueOf(AMOS_scheduledoutofservice));
		sb.append(",AMOS_unscheduledoutofservice="+String.valueOf(AMOS_unscheduledoutofservice));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dbLoadingStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class aggr_recoveryStruct implements routines.system.IPersistableRow<aggr_recoveryStruct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String AIMS_aircraftregistration;

				public String getAIMS_aircraftregistration () {
					return this.AIMS_aircraftregistration;
				}
				
			    public Integer AIMS_flighthours;

				public Integer getAIMS_flighthours () {
					return this.AIMS_flighthours;
				}
				
			    public Integer AIMS_flightcycles;

				public Integer getAIMS_flightcycles () {
					return this.AIMS_flightcycles;
				}
				
			    public Integer AIMS_delays;

				public Integer getAIMS_delays () {
					return this.AIMS_delays;
				}
				
			    public Integer AIMS_delayedminutes;

				public Integer getAIMS_delayedminutes () {
					return this.AIMS_delayedminutes;
				}
				
			    public Integer AIMS_cancellations;

				public Integer getAIMS_cancellations () {
					return this.AIMS_cancellations;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Integer AMOS_scheduledoutofservice;

				public Integer getAMOS_scheduledoutofservice () {
					return this.AMOS_scheduledoutofservice;
				}
				
			    public Integer AMOS_unscheduledoutofservice;

				public Integer getAMOS_unscheduledoutofservice () {
					return this.AMOS_unscheduledoutofservice;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.date = readDate(dis);
					
						this.AMOS_scheduledoutofservice = readInteger(dis);
					
						this.AMOS_unscheduledoutofservice = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.date = readDate(dis);
					
						this.AMOS_scheduledoutofservice = readInteger(dis);
					
						this.AMOS_unscheduledoutofservice = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.AMOS_scheduledoutofservice,dos);
					
					// Integer
				
						writeInteger(this.AMOS_unscheduledoutofservice,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.AMOS_scheduledoutofservice,dos);
					
					// Integer
				
						writeInteger(this.AMOS_unscheduledoutofservice,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AIMS_aircraftregistration="+AIMS_aircraftregistration);
		sb.append(",AIMS_flighthours="+String.valueOf(AIMS_flighthours));
		sb.append(",AIMS_flightcycles="+String.valueOf(AIMS_flightcycles));
		sb.append(",AIMS_delays="+String.valueOf(AIMS_delays));
		sb.append(",AIMS_delayedminutes="+String.valueOf(AIMS_delayedminutes));
		sb.append(",AIMS_cancellations="+String.valueOf(AIMS_cancellations));
		sb.append(",date="+String.valueOf(date));
		sb.append(",AMOS_scheduledoutofservice="+String.valueOf(AMOS_scheduledoutofservice));
		sb.append(",AMOS_unscheduledoutofservice="+String.valueOf(AMOS_unscheduledoutofservice));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(aggr_recoveryStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String AIMS_aircraftregistration;

				public String getAIMS_aircraftregistration () {
					return this.AIMS_aircraftregistration;
				}
				
			    public Integer AIMS_flighthours;

				public Integer getAIMS_flighthours () {
					return this.AIMS_flighthours;
				}
				
			    public Integer AIMS_flightcycles;

				public Integer getAIMS_flightcycles () {
					return this.AIMS_flightcycles;
				}
				
			    public Integer AIMS_delays;

				public Integer getAIMS_delays () {
					return this.AIMS_delays;
				}
				
			    public Integer AIMS_delayedminutes;

				public Integer getAIMS_delayedminutes () {
					return this.AIMS_delayedminutes;
				}
				
			    public Integer AIMS_cancellations;

				public Integer getAIMS_cancellations () {
					return this.AIMS_cancellations;
				}
				
			    public Float AMOS_scheduledoutofservice;

				public Float getAMOS_scheduledoutofservice () {
					return this.AMOS_scheduledoutofservice;
				}
				
			    public Float AMOS_unscheduledoutofservice;

				public Float getAMOS_unscheduledoutofservice () {
					return this.AMOS_unscheduledoutofservice;
				}
				
			    public String AIMS_date;

				public String getAIMS_date () {
					return this.AIMS_date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
					this.AIMS_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
					this.AIMS_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
					// String
				
						writeString(this.AIMS_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
					// String
				
						writeString(this.AIMS_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AIMS_aircraftregistration="+AIMS_aircraftregistration);
		sb.append(",AIMS_flighthours="+String.valueOf(AIMS_flighthours));
		sb.append(",AIMS_flightcycles="+String.valueOf(AIMS_flightcycles));
		sb.append(",AIMS_delays="+String.valueOf(AIMS_delays));
		sb.append(",AIMS_delayedminutes="+String.valueOf(AIMS_delayedminutes));
		sb.append(",AIMS_cancellations="+String.valueOf(AIMS_cancellations));
		sb.append(",AMOS_scheduledoutofservice="+String.valueOf(AMOS_scheduledoutofservice));
		sb.append(",AMOS_unscheduledoutofservice="+String.valueOf(AMOS_unscheduledoutofservice));
		sb.append(",AIMS_date="+AIMS_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String AIMS_aircraftregistration;

				public String getAIMS_aircraftregistration () {
					return this.AIMS_aircraftregistration;
				}
				
			    public Integer AIMS_flighthours;

				public Integer getAIMS_flighthours () {
					return this.AIMS_flighthours;
				}
				
			    public Integer AIMS_flightcycles;

				public Integer getAIMS_flightcycles () {
					return this.AIMS_flightcycles;
				}
				
			    public Integer AIMS_delays;

				public Integer getAIMS_delays () {
					return this.AIMS_delays;
				}
				
			    public Integer AIMS_delayedminutes;

				public Integer getAIMS_delayedminutes () {
					return this.AIMS_delayedminutes;
				}
				
			    public Integer AIMS_cancellations;

				public Integer getAIMS_cancellations () {
					return this.AIMS_cancellations;
				}
				
			    public Float AMOS_scheduledoutofservice;

				public Float getAMOS_scheduledoutofservice () {
					return this.AMOS_scheduledoutofservice;
				}
				
			    public Float AMOS_unscheduledoutofservice;

				public Float getAMOS_unscheduledoutofservice () {
					return this.AMOS_unscheduledoutofservice;
				}
				
			    public String AIMS_date;

				public String getAIMS_date () {
					return this.AIMS_date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
					this.AIMS_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
					this.AIMS_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
					// String
				
						writeString(this.AIMS_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
					// String
				
						writeString(this.AIMS_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AIMS_aircraftregistration="+AIMS_aircraftregistration);
		sb.append(",AIMS_flighthours="+String.valueOf(AIMS_flighthours));
		sb.append(",AIMS_flightcycles="+String.valueOf(AIMS_flightcycles));
		sb.append(",AIMS_delays="+String.valueOf(AIMS_delays));
		sb.append(",AIMS_delayedminutes="+String.valueOf(AIMS_delayedminutes));
		sb.append(",AIMS_cancellations="+String.valueOf(AIMS_cancellations));
		sb.append(",AMOS_scheduledoutofservice="+String.valueOf(AMOS_scheduledoutofservice));
		sb.append(",AMOS_unscheduledoutofservice="+String.valueOf(AMOS_unscheduledoutofservice));
		sb.append(",AIMS_date="+AIMS_date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class recovery_joinStruct implements routines.system.IPersistableRow<recovery_joinStruct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String AIMS_flightid;

				public String getAIMS_flightid () {
					return this.AIMS_flightid;
				}
				
			    public String AIMS_aircraftregistration;

				public String getAIMS_aircraftregistration () {
					return this.AIMS_aircraftregistration;
				}
				
			    public Integer AIMS_flighthours;

				public Integer getAIMS_flighthours () {
					return this.AIMS_flighthours;
				}
				
			    public Integer AIMS_flightcycles;

				public Integer getAIMS_flightcycles () {
					return this.AIMS_flightcycles;
				}
				
			    public Integer AIMS_delays;

				public Integer getAIMS_delays () {
					return this.AIMS_delays;
				}
				
			    public Integer AIMS_delayedminutes;

				public Integer getAIMS_delayedminutes () {
					return this.AIMS_delayedminutes;
				}
				
			    public Integer AIMS_cancellations;

				public Integer getAIMS_cancellations () {
					return this.AIMS_cancellations;
				}
				
			    public String AIMS_date;

				public String getAIMS_date () {
					return this.AIMS_date;
				}
				
			    public Float AMOS_scheduledoutofservice;

				public Float getAMOS_scheduledoutofservice () {
					return this.AMOS_scheduledoutofservice;
				}
				
			    public Float AMOS_unscheduledoutofservice;

				public Float getAMOS_unscheduledoutofservice () {
					return this.AMOS_unscheduledoutofservice;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_flightid = readString(dis);
					
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.AIMS_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_flightid = readString(dis);
					
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.AIMS_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AIMS_flightid,dos);
					
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// String
				
						writeString(this.AIMS_date,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AIMS_flightid,dos);
					
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// String
				
						writeString(this.AIMS_date,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AIMS_flightid="+AIMS_flightid);
		sb.append(",AIMS_aircraftregistration="+AIMS_aircraftregistration);
		sb.append(",AIMS_flighthours="+String.valueOf(AIMS_flighthours));
		sb.append(",AIMS_flightcycles="+String.valueOf(AIMS_flightcycles));
		sb.append(",AIMS_delays="+String.valueOf(AIMS_delays));
		sb.append(",AIMS_delayedminutes="+String.valueOf(AIMS_delayedminutes));
		sb.append(",AIMS_cancellations="+String.valueOf(AIMS_cancellations));
		sb.append(",AIMS_date="+AIMS_date);
		sb.append(",AMOS_scheduledoutofservice="+String.valueOf(AMOS_scheduledoutofservice));
		sb.append(",AMOS_unscheduledoutofservice="+String.valueOf(AMOS_unscheduledoutofservice));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(recovery_joinStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class aggregationStruct implements routines.system.IPersistableRow<aggregationStruct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String AIMS_flightid;

				public String getAIMS_flightid () {
					return this.AIMS_flightid;
				}
				
			    public String AIMS_aircraftregistration;

				public String getAIMS_aircraftregistration () {
					return this.AIMS_aircraftregistration;
				}
				
			    public Integer AIMS_flighthours;

				public Integer getAIMS_flighthours () {
					return this.AIMS_flighthours;
				}
				
			    public Integer AIMS_flightcycles;

				public Integer getAIMS_flightcycles () {
					return this.AIMS_flightcycles;
				}
				
			    public Integer AIMS_delays;

				public Integer getAIMS_delays () {
					return this.AIMS_delays;
				}
				
			    public Integer AIMS_delayedminutes;

				public Integer getAIMS_delayedminutes () {
					return this.AIMS_delayedminutes;
				}
				
			    public Integer AIMS_cancellations;

				public Integer getAIMS_cancellations () {
					return this.AIMS_cancellations;
				}
				
			    public String AIMS_date;

				public String getAIMS_date () {
					return this.AIMS_date;
				}
				
			    public Float AMOS_scheduledoutofservice;

				public Float getAMOS_scheduledoutofservice () {
					return this.AMOS_scheduledoutofservice;
				}
				
			    public Float AMOS_unscheduledoutofservice;

				public Float getAMOS_unscheduledoutofservice () {
					return this.AMOS_unscheduledoutofservice;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_flightid = readString(dis);
					
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.AIMS_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_flightid = readString(dis);
					
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.AIMS_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AIMS_flightid,dos);
					
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// String
				
						writeString(this.AIMS_date,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AIMS_flightid,dos);
					
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// String
				
						writeString(this.AIMS_date,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AIMS_flightid="+AIMS_flightid);
		sb.append(",AIMS_aircraftregistration="+AIMS_aircraftregistration);
		sb.append(",AIMS_flighthours="+String.valueOf(AIMS_flighthours));
		sb.append(",AIMS_flightcycles="+String.valueOf(AIMS_flightcycles));
		sb.append(",AIMS_delays="+String.valueOf(AIMS_delays));
		sb.append(",AIMS_delayedminutes="+String.valueOf(AIMS_delayedminutes));
		sb.append(",AIMS_cancellations="+String.valueOf(AIMS_cancellations));
		sb.append(",AIMS_date="+AIMS_date);
		sb.append(",AMOS_scheduledoutofservice="+String.valueOf(AMOS_scheduledoutofservice));
		sb.append(",AMOS_unscheduledoutofservice="+String.valueOf(AMOS_unscheduledoutofservice));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(aggregationStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String AIMS_flightid;

				public String getAIMS_flightid () {
					return this.AIMS_flightid;
				}
				
			    public String AIMS_aircraftregistration;

				public String getAIMS_aircraftregistration () {
					return this.AIMS_aircraftregistration;
				}
				
			    public Integer AIMS_flighthours;

				public Integer getAIMS_flighthours () {
					return this.AIMS_flighthours;
				}
				
			    public Integer AIMS_flightcycles;

				public Integer getAIMS_flightcycles () {
					return this.AIMS_flightcycles;
				}
				
			    public Integer AIMS_delays;

				public Integer getAIMS_delays () {
					return this.AIMS_delays;
				}
				
			    public Integer AIMS_delayedminutes;

				public Integer getAIMS_delayedminutes () {
					return this.AIMS_delayedminutes;
				}
				
			    public Integer AIMS_cancellations;

				public Integer getAIMS_cancellations () {
					return this.AIMS_cancellations;
				}
				
			    public String AIMS_date;

				public String getAIMS_date () {
					return this.AIMS_date;
				}
				
			    public Float AMOS_scheduledoutofservice;

				public Float getAMOS_scheduledoutofservice () {
					return this.AMOS_scheduledoutofservice;
				}
				
			    public Float AMOS_unscheduledoutofservice;

				public Float getAMOS_unscheduledoutofservice () {
					return this.AMOS_unscheduledoutofservice;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_flightid = readString(dis);
					
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.AIMS_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_flightid = readString(dis);
					
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.AIMS_date = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AIMS_flightid,dos);
					
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// String
				
						writeString(this.AIMS_date,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AIMS_flightid,dos);
					
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// String
				
						writeString(this.AIMS_date,dos);
					
					// Float
				
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AIMS_flightid="+AIMS_flightid);
		sb.append(",AIMS_aircraftregistration="+AIMS_aircraftregistration);
		sb.append(",AIMS_flighthours="+String.valueOf(AIMS_flighthours));
		sb.append(",AIMS_flightcycles="+String.valueOf(AIMS_flightcycles));
		sb.append(",AIMS_delays="+String.valueOf(AIMS_delays));
		sb.append(",AIMS_delayedminutes="+String.valueOf(AIMS_delayedminutes));
		sb.append(",AIMS_cancellations="+String.valueOf(AIMS_cancellations));
		sb.append(",AIMS_date="+AIMS_date);
		sb.append(",AMOS_scheduledoutofservice="+String.valueOf(AMOS_scheduledoutofservice));
		sb.append(",AMOS_unscheduledoutofservice="+String.valueOf(AMOS_unscheduledoutofservice));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class AIMSStruct implements routines.system.IPersistableRow<AIMSStruct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String AIMS_flightid;

				public String getAIMS_flightid () {
					return this.AIMS_flightid;
				}
				
			    public String AIMS_aircraftregistration;

				public String getAIMS_aircraftregistration () {
					return this.AIMS_aircraftregistration;
				}
				
			    public Integer AIMS_flighthours;

				public Integer getAIMS_flighthours () {
					return this.AIMS_flighthours;
				}
				
			    public Integer AIMS_flightcycles;

				public Integer getAIMS_flightcycles () {
					return this.AIMS_flightcycles;
				}
				
			    public Integer AIMS_delays;

				public Integer getAIMS_delays () {
					return this.AIMS_delays;
				}
				
			    public Integer AIMS_delayedminutes;

				public Integer getAIMS_delayedminutes () {
					return this.AIMS_delayedminutes;
				}
				
			    public Integer AIMS_cancellations;

				public Integer getAIMS_cancellations () {
					return this.AIMS_cancellations;
				}
				
			    public String AIMS_date;

				public String getAIMS_date () {
					return this.AIMS_date;
				}
				
			    public String AIMS_delaycode;

				public String getAIMS_delaycode () {
					return this.AIMS_delaycode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_flightid = readString(dis);
					
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.AIMS_date = readString(dis);
					
					this.AIMS_delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AIMS_flightid = readString(dis);
					
					this.AIMS_aircraftregistration = readString(dis);
					
						this.AIMS_flighthours = readInteger(dis);
					
						this.AIMS_flightcycles = readInteger(dis);
					
						this.AIMS_delays = readInteger(dis);
					
						this.AIMS_delayedminutes = readInteger(dis);
					
						this.AIMS_cancellations = readInteger(dis);
					
					this.AIMS_date = readString(dis);
					
					this.AIMS_delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AIMS_flightid,dos);
					
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// String
				
						writeString(this.AIMS_date,dos);
					
					// String
				
						writeString(this.AIMS_delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AIMS_flightid,dos);
					
					// String
				
						writeString(this.AIMS_aircraftregistration,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flighthours,dos);
					
					// Integer
				
						writeInteger(this.AIMS_flightcycles,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delays,dos);
					
					// Integer
				
						writeInteger(this.AIMS_delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.AIMS_cancellations,dos);
					
					// String
				
						writeString(this.AIMS_date,dos);
					
					// String
				
						writeString(this.AIMS_delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AIMS_flightid="+AIMS_flightid);
		sb.append(",AIMS_aircraftregistration="+AIMS_aircraftregistration);
		sb.append(",AIMS_flighthours="+String.valueOf(AIMS_flighthours));
		sb.append(",AIMS_flightcycles="+String.valueOf(AIMS_flightcycles));
		sb.append(",AIMS_delays="+String.valueOf(AIMS_delays));
		sb.append(",AIMS_delayedminutes="+String.valueOf(AIMS_delayedminutes));
		sb.append(",AIMS_cancellations="+String.valueOf(AIMS_cancellations));
		sb.append(",AIMS_date="+AIMS_date);
		sb.append(",AIMS_delaycode="+AIMS_delaycode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AIMSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String flightid;

				public String getFlightid () {
					return this.flightid;
				}
				
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String departureairport;

				public String getDepartureairport () {
					return this.departureairport;
				}
				
			    public String arrivalairport;

				public String getArrivalairport () {
					return this.arrivalairport;
				}
				
			    public java.util.Date scheduleddeparture;

				public java.util.Date getScheduleddeparture () {
					return this.scheduleddeparture;
				}
				
			    public String delaycode;

				public String getDelaycode () {
					return this.delaycode;
				}
				
			    public String cancelled;

				public String getCancelled () {
					return this.cancelled;
				}
				
			    public String kind;

				public String getKind () {
					return this.kind;
				}
				
			    public Integer flighthours;

				public Integer getFlighthours () {
					return this.flighthours;
				}
				
			    public Integer flightcycles;

				public Integer getFlightcycles () {
					return this.flightcycles;
				}
				
			    public Integer delays;

				public Integer getDelays () {
					return this.delays;
				}
				
			    public Integer delayedminutes;

				public Integer getDelayedminutes () {
					return this.delayedminutes;
				}
				
			    public Integer cancellations;

				public Integer getCancellations () {
					return this.cancellations;
				}
				
			    public String date;

				public String getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.aircraftregistration = readString(dis);
					
					this.departureairport = readString(dis);
					
					this.arrivalairport = readString(dis);
					
					this.scheduleddeparture = readDate(dis);
					
					this.delaycode = readString(dis);
					
					this.cancelled = readString(dis);
					
					this.kind = readString(dis);
					
						this.flighthours = readInteger(dis);
					
						this.flightcycles = readInteger(dis);
					
						this.delays = readInteger(dis);
					
						this.delayedminutes = readInteger(dis);
					
						this.cancellations = readInteger(dis);
					
					this.date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.aircraftregistration = readString(dis);
					
					this.departureairport = readString(dis);
					
					this.arrivalairport = readString(dis);
					
					this.scheduleddeparture = readDate(dis);
					
					this.delaycode = readString(dis);
					
					this.cancelled = readString(dis);
					
					this.kind = readString(dis);
					
						this.flighthours = readInteger(dis);
					
						this.flightcycles = readInteger(dis);
					
						this.delays = readInteger(dis);
					
						this.delayedminutes = readInteger(dis);
					
						this.cancellations = readInteger(dis);
					
					this.date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.departureairport,dos);
					
					// String
				
						writeString(this.arrivalairport,dos);
					
					// java.util.Date
				
						writeDate(this.scheduleddeparture,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
					// String
				
						writeString(this.cancelled,dos);
					
					// String
				
						writeString(this.kind,dos);
					
					// Integer
				
						writeInteger(this.flighthours,dos);
					
					// Integer
				
						writeInteger(this.flightcycles,dos);
					
					// Integer
				
						writeInteger(this.delays,dos);
					
					// Integer
				
						writeInteger(this.delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.cancellations,dos);
					
					// String
				
						writeString(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.departureairport,dos);
					
					// String
				
						writeString(this.arrivalairport,dos);
					
					// java.util.Date
				
						writeDate(this.scheduleddeparture,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
					// String
				
						writeString(this.cancelled,dos);
					
					// String
				
						writeString(this.kind,dos);
					
					// Integer
				
						writeInteger(this.flighthours,dos);
					
					// Integer
				
						writeInteger(this.flightcycles,dos);
					
					// Integer
				
						writeInteger(this.delays,dos);
					
					// Integer
				
						writeInteger(this.delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.cancellations,dos);
					
					// String
				
						writeString(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flightid="+flightid);
		sb.append(",aircraftregistration="+aircraftregistration);
		sb.append(",departureairport="+departureairport);
		sb.append(",arrivalairport="+arrivalairport);
		sb.append(",scheduleddeparture="+String.valueOf(scheduleddeparture));
		sb.append(",delaycode="+delaycode);
		sb.append(",cancelled="+cancelled);
		sb.append(",kind="+kind);
		sb.append(",flighthours="+String.valueOf(flighthours));
		sb.append(",flightcycles="+String.valueOf(flightcycles));
		sb.append(",delays="+String.valueOf(delays));
		sb.append(",delayedminutes="+String.valueOf(delayedminutes));
		sb.append(",cancellations="+String.valueOf(cancellations));
		sb.append(",date="+date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String flightid;

				public String getFlightid () {
					return this.flightid;
				}
				
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String departureairport;

				public String getDepartureairport () {
					return this.departureairport;
				}
				
			    public String arrivalairport;

				public String getArrivalairport () {
					return this.arrivalairport;
				}
				
			    public java.util.Date scheduleddeparture;

				public java.util.Date getScheduleddeparture () {
					return this.scheduleddeparture;
				}
				
			    public String delaycode;

				public String getDelaycode () {
					return this.delaycode;
				}
				
			    public String cancelled;

				public String getCancelled () {
					return this.cancelled;
				}
				
			    public String kind;

				public String getKind () {
					return this.kind;
				}
				
			    public Integer flighthours;

				public Integer getFlighthours () {
					return this.flighthours;
				}
				
			    public Integer flightcycles;

				public Integer getFlightcycles () {
					return this.flightcycles;
				}
				
			    public Integer delays;

				public Integer getDelays () {
					return this.delays;
				}
				
			    public Integer delayedminutes;

				public Integer getDelayedminutes () {
					return this.delayedminutes;
				}
				
			    public Integer cancellations;

				public Integer getCancellations () {
					return this.cancellations;
				}
				
			    public String date;

				public String getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.aircraftregistration = readString(dis);
					
					this.departureairport = readString(dis);
					
					this.arrivalairport = readString(dis);
					
					this.scheduleddeparture = readDate(dis);
					
					this.delaycode = readString(dis);
					
					this.cancelled = readString(dis);
					
					this.kind = readString(dis);
					
						this.flighthours = readInteger(dis);
					
						this.flightcycles = readInteger(dis);
					
						this.delays = readInteger(dis);
					
						this.delayedminutes = readInteger(dis);
					
						this.cancellations = readInteger(dis);
					
					this.date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.aircraftregistration = readString(dis);
					
					this.departureairport = readString(dis);
					
					this.arrivalairport = readString(dis);
					
					this.scheduleddeparture = readDate(dis);
					
					this.delaycode = readString(dis);
					
					this.cancelled = readString(dis);
					
					this.kind = readString(dis);
					
						this.flighthours = readInteger(dis);
					
						this.flightcycles = readInteger(dis);
					
						this.delays = readInteger(dis);
					
						this.delayedminutes = readInteger(dis);
					
						this.cancellations = readInteger(dis);
					
					this.date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.departureairport,dos);
					
					// String
				
						writeString(this.arrivalairport,dos);
					
					// java.util.Date
				
						writeDate(this.scheduleddeparture,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
					// String
				
						writeString(this.cancelled,dos);
					
					// String
				
						writeString(this.kind,dos);
					
					// Integer
				
						writeInteger(this.flighthours,dos);
					
					// Integer
				
						writeInteger(this.flightcycles,dos);
					
					// Integer
				
						writeInteger(this.delays,dos);
					
					// Integer
				
						writeInteger(this.delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.cancellations,dos);
					
					// String
				
						writeString(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.departureairport,dos);
					
					// String
				
						writeString(this.arrivalairport,dos);
					
					// java.util.Date
				
						writeDate(this.scheduleddeparture,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
					// String
				
						writeString(this.cancelled,dos);
					
					// String
				
						writeString(this.kind,dos);
					
					// Integer
				
						writeInteger(this.flighthours,dos);
					
					// Integer
				
						writeInteger(this.flightcycles,dos);
					
					// Integer
				
						writeInteger(this.delays,dos);
					
					// Integer
				
						writeInteger(this.delayedminutes,dos);
					
					// Integer
				
						writeInteger(this.cancellations,dos);
					
					// String
				
						writeString(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flightid="+flightid);
		sb.append(",aircraftregistration="+aircraftregistration);
		sb.append(",departureairport="+departureairport);
		sb.append(",arrivalairport="+arrivalairport);
		sb.append(",scheduleddeparture="+String.valueOf(scheduleddeparture));
		sb.append(",delaycode="+delaycode);
		sb.append(",cancelled="+cancelled);
		sb.append(",kind="+kind);
		sb.append(",flighthours="+String.valueOf(flighthours));
		sb.append(",flightcycles="+String.valueOf(flightcycles));
		sb.append(",delays="+String.valueOf(delays));
		sb.append(",delayedminutes="+String.valueOf(delayedminutes));
		sb.append(",cancellations="+String.valueOf(cancellations));
		sb.append(",date="+date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row2Struct row2 = new row2Struct();
AIMSStruct AIMS = new AIMSStruct();
row3Struct row3 = new row3Struct();
recovery_joinStruct recovery_join = new recovery_joinStruct();
aggregationStruct aggregation = new aggregationStruct();
row4Struct row4 = new row4Struct();
dbLoadingStruct dbLoading = new dbLoadingStruct();
aggr_recoveryStruct aggr_recovery = new aggr_recoveryStruct();







	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"recovery_join");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/recovery_join_AIMS_AMOS.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"aggregation");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String AIMS_aircraftregistration;
    				String AIMS_date;
         			Integer AIMS_flighthours_sum;
         			Integer AIMS_flightcycles_sum;
         			Integer AIMS_delays_sum;
         			Integer AIMS_delayedminutes_sum;
         			Integer AIMS_cancellations_sum;BigDecimal AMOS_scheduledoutofservice_sum;
           			BigDecimal AMOS_unscheduledoutofservice_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.AIMS_aircraftregistration == null) ? 0 : this.AIMS_aircraftregistration.hashCode());
							
							result = prime * result + ((this.AIMS_date == null) ? 0 : this.AIMS_date.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.AIMS_aircraftregistration == null) {
								if (other.AIMS_aircraftregistration != null) 
									return false;
							} else if (!this.AIMS_aircraftregistration.equals(other.AIMS_aircraftregistration)) 
								return false;
						
							if (this.AIMS_date == null) {
								if (other.AIMS_date != null) 
									return false;
							} else if (!this.AIMS_date.equals(other.AIMS_date)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
recovery_joinStruct recovery_join_tmp = new recovery_joinStruct();
aggregationStruct aggregation_tmp = new aggregationStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tJoin_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_2", false);
		start_Hash.put("tJoin_2", System.currentTimeMillis());
		
	
	currentComponent="tJoin_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"AIMS");
					}
				
		int tos_count_tJoin_2 = 0;
		
    final java.util.Map<AMOSStruct, AMOSStruct> tHash_tJoin_2 = (java.util.Map<AMOSStruct, AMOSStruct>) globalMap.get("tHash_AMOS");
    
    class Util_tJoin_2
    {
        AMOSStruct lookupValue = null;
        AMOSStruct AMOSHashKey = new AMOSStruct(); 
        
        public boolean isJoined(AIMSStruct mainRow) {                        
           AMOSHashKey.AMOS_flightid = mainRow.AIMS_flightid;
            
           AMOSHashKey.AMOS_aircraftregistration = mainRow.AIMS_aircraftregistration;
            
           AMOSHashKey.AMOS_date = mainRow.AIMS_date;
            
           AMOSHashKey.AMOS_delaycode = mainRow.AIMS_delaycode;

			AMOSHashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_2.get(AMOSHashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_2 util_tJoin_2 = new Util_tJoin_2();
        
    int nb_line_tJoin_2 = 0; 
 



/**
 * [tJoin_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
AIMSStruct AIMS_tmp = new AIMSStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "odysseas.kyparissis";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:215dM74S/B1OktSFIS7FKwdvCcsLWT7tWM0XNMViVy0UQEjI");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AIMS";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT  DISTINCT f1.flightID,  f1.aircraftRegistration, f1.departureAirport, f1.arrivalAirport, f1.scheduledDeparture, "
+" \nCASE WHEN f1.delayCode IS NULL THEN 'empty' WHEN f1.delayCode = '' THEN 'empty' ELSE f1.delayCode::varchar(10) END, f"
+"1.cancelled, f1.kind,\n(DATE_PART('day', f1.actualArrival::timestamp - f1.actualDeparture::timestamp) * 24 + \nDATE_PART"
+"('hour', f1.actualArrival::timestamp - f1.actualDeparture::timestamp)) as flightHours,\nCASE f1.cancelled WHEN 'f' then "
+"1 WHEN 't' THEN 0 END as flightCycles,\nCASE WHEN (DATE_PART('day', f1.actualDeparture::timestamp - f1.scheduledDepartur"
+"e::timestamp) * 24 + \n DATE_PART('hour', f1.actualDeparture::timestamp - f1.scheduledDeparture::timestamp)) * 60 +\n DA"
+"TE_PART('minute', f1.actualDeparture::timestamp - f1.scheduledDeparture::timestamp) > 0 THEN 1 ELSE 0 END as delays,\n(D"
+"ATE_PART('day', f1.actualDeparture::timestamp - f1.scheduledDeparture::timestamp) * 24 + \n DATE_PART('hour', f1.actualD"
+"eparture::timestamp - f1.scheduledDeparture::timestamp)) * 60 +\n DATE_PART('minute', f1.actualDeparture::timestamp - f1"
+".scheduledDeparture::timestamp) as delayedMinutes,\n0 as cancellations,\nto_char(f1.scheduledDeparture,'DD-MM-YYYY') as "
+"date\nFROM Flights f1\nWHERE f1.scheduledArrival > f1.scheduledDeparture AND  f1.actualArrival > f1.actualDeparture AND "
+"f1.cancelled = 'f'\nAND substring(f1.flightID from 8 for 3) =  substring(f1.departureAirport from 1 for 3)\nAND NOT EXIS"
+"TS (\nSELECT 1\nFROM Flights f2\nWHERE f1.scheduledDeparture <= f2.scheduledArrival AND f1.scheduledArrival >= f2.schedu"
+"ledDeparture AND f1.aircraftRegistration=f2.aircraftRegistration\nAND f1.flightID <> f2.flightID\n)\nUNION\nSELECT DISTI"
+"NCT flightID,  aircraftRegistration, departureAirport, arrivalAirport, scheduledDeparture,\nCASE WHEN delayCode IS NULL "
+"THEN 'empty' WHEN delayCode = '' THEN 'empty' ELSE delayCode::varchar(10) END, cancelled, kind,\n(DATE_PART('day', actua"
+"lArrival::timestamp - actualDeparture::timestamp) * 24 + \nDATE_PART('hour', actualArrival::timestamp - actualDeparture:"
+":timestamp)) as flightHours,\nCASE cancelled WHEN 'f' then 1 WHEN 't' THEN 0 END as flightCycles,\n0 AS delays,\n0 AS de"
+"layedMinutes,\n1 AS cancellations,\nto_char(scheduledDeparture,'DD-MM-YYYY') as date\nFROM Flights\nWHERE cancelled = 't"
+"' AND scheduledArrival > scheduledDeparture AND substring(flightID from 8 for 3) =  substring(departureAirport from 1 fo"
+"r 3)";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.flightid = null;
							} else {
	                         		
        	row2.flightid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.aircraftregistration = null;
							} else {
	                         		
        	row2.aircraftregistration = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.departureairport = null;
							} else {
	                         		
        	row2.departureairport = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row2.arrivalairport = null;
							} else {
	                         		
        	row2.arrivalairport = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row2.scheduleddeparture = null;
							} else {
										
			row2.scheduleddeparture = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 5);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row2.delaycode = null;
							} else {
	                         		
        	row2.delaycode = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row2.cancelled = null;
							} else {
	                         		
        	row2.cancelled = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row2.kind = null;
							} else {
	                         		
        	row2.kind = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row2.flighthours = null;
							} else {
		                          
            row2.flighthours = rs_tDBInput_1.getInt(9);
            if(rs_tDBInput_1.wasNull()){
                    row2.flighthours = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row2.flightcycles = null;
							} else {
		                          
            row2.flightcycles = rs_tDBInput_1.getInt(10);
            if(rs_tDBInput_1.wasNull()){
                    row2.flightcycles = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row2.delays = null;
							} else {
		                          
            row2.delays = rs_tDBInput_1.getInt(11);
            if(rs_tDBInput_1.wasNull()){
                    row2.delays = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row2.delayedminutes = null;
							} else {
		                          
            row2.delayedminutes = rs_tDBInput_1.getInt(12);
            if(rs_tDBInput_1.wasNull()){
                    row2.delayedminutes = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row2.cancellations = null;
							} else {
		                          
            row2.cancellations = rs_tDBInput_1.getInt(13);
            if(rs_tDBInput_1.wasNull()){
                    row2.cancellations = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row2.date = null;
							} else {
	                         		
        	row2.date = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

AIMS = null;


// # Output table : 'AIMS'
AIMS_tmp.AIMS_flightid = row2.flightid ;
AIMS_tmp.AIMS_aircraftregistration = row2.aircraftregistration ;
AIMS_tmp.AIMS_flighthours = row2.flighthours ;
AIMS_tmp.AIMS_flightcycles = row2.flightcycles ;
AIMS_tmp.AIMS_delays = row2.delays ;
AIMS_tmp.AIMS_delayedminutes = row2.delayedminutes ;
AIMS_tmp.AIMS_cancellations = row2.cancellations ;
AIMS_tmp.AIMS_date = row2.date ;
AIMS_tmp.AIMS_delaycode = row2.delaycode ;
AIMS = AIMS_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "AIMS"
if(AIMS != null) { 



	
	/**
	 * [tJoin_2 main ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"AIMS"
						
						);
					}
					

			row3 = null;	
	
				row3 = new row3Struct();						
						row3.AIMS_flightid = AIMS.AIMS_flightid;					
						row3.AIMS_aircraftregistration = AIMS.AIMS_aircraftregistration;					
						row3.AIMS_flighthours = AIMS.AIMS_flighthours;					
						row3.AIMS_flightcycles = AIMS.AIMS_flightcycles;					
						row3.AIMS_delays = AIMS.AIMS_delays;					
						row3.AIMS_delayedminutes = AIMS.AIMS_delayedminutes;					
						row3.AIMS_cancellations = AIMS.AIMS_cancellations;					
						row3.AIMS_date = AIMS.AIMS_date;

			if(util_tJoin_2.isJoined(AIMS)){ 			
								row3.AMOS_scheduledoutofservice = util_tJoin_2.lookupValue.AMOS_scheduledoutofservice;			
								row3.AMOS_unscheduledoutofservice = util_tJoin_2.lookupValue.AMOS_unscheduledoutofservice;
			} 
		
				else{ 
						row3 = null; 
				}		
///////////////////////    			

 


	tos_count_tJoin_2++;

/**
 * [tJoin_2 main ] stop
 */
	
	/**
	 * [tJoin_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

recovery_join = null;
aggregation = null;


// # Output table : 'recovery_join'
recovery_join_tmp.AIMS_flightid = row3.AIMS_flightid ;
recovery_join_tmp.AIMS_aircraftregistration = row3.AIMS_aircraftregistration ;
recovery_join_tmp.AIMS_flighthours = row3.AIMS_flighthours ;
recovery_join_tmp.AIMS_flightcycles = row3.AIMS_flightcycles ;
recovery_join_tmp.AIMS_delays = row3.AIMS_delays ;
recovery_join_tmp.AIMS_delayedminutes = row3.AIMS_delayedminutes ;
recovery_join_tmp.AIMS_cancellations = row3.AIMS_cancellations ;
recovery_join_tmp.AIMS_date = row3.AIMS_date ;
recovery_join_tmp.AMOS_scheduledoutofservice = row3.AMOS_scheduledoutofservice ;
recovery_join_tmp.AMOS_unscheduledoutofservice = row3.AMOS_unscheduledoutofservice ;
recovery_join = recovery_join_tmp;

// # Output table : 'aggregation'
aggregation_tmp.AIMS_flightid = row3.AIMS_flightid ;
aggregation_tmp.AIMS_aircraftregistration = row3.AIMS_aircraftregistration ;
aggregation_tmp.AIMS_flighthours = row3.AIMS_flighthours ;
aggregation_tmp.AIMS_flightcycles = row3.AIMS_flightcycles ;
aggregation_tmp.AIMS_delays = row3.AIMS_delays ;
aggregation_tmp.AIMS_delayedminutes = row3.AIMS_delayedminutes ;
aggregation_tmp.AIMS_cancellations = row3.AIMS_cancellations ;
aggregation_tmp.AIMS_date = row3.AIMS_date ;
aggregation_tmp.AMOS_scheduledoutofservice = row3.AMOS_scheduledoutofservice ;
aggregation_tmp.AMOS_unscheduledoutofservice = row3.AMOS_unscheduledoutofservice ;
aggregation = aggregation_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "recovery_join"
if(recovery_join != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"recovery_join"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(recovery_join.AIMS_flightid != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AIMS_flightid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(recovery_join.AIMS_aircraftregistration != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AIMS_aircraftregistration
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(recovery_join.AIMS_flighthours != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AIMS_flighthours
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(recovery_join.AIMS_flightcycles != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AIMS_flightcycles
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(recovery_join.AIMS_delays != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AIMS_delays
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(recovery_join.AIMS_delayedminutes != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AIMS_delayedminutes
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(recovery_join.AIMS_cancellations != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AIMS_cancellations
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(recovery_join.AIMS_date != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AIMS_date
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(recovery_join.AMOS_scheduledoutofservice != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AMOS_scheduledoutofservice
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(recovery_join.AMOS_unscheduledoutofservice != null) {
                        sb_tFileOutputDelimited_1.append(
                            recovery_join.AMOS_unscheduledoutofservice
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "recovery_join"




// Start of branch "aggregation"
if(aggregation != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"aggregation"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.AIMS_aircraftregistration = aggregation.AIMS_aircraftregistration;
			operation_finder_tAggregateRow_1.AIMS_date = aggregation.AIMS_date;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.AIMS_aircraftregistration = operation_finder_tAggregateRow_1.AIMS_aircraftregistration;
				operation_result_tAggregateRow_1.AIMS_date = operation_finder_tAggregateRow_1.AIMS_date;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(aggregation.AIMS_flighthours != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_1.AIMS_flighthours_sum == null) {
						operation_result_tAggregateRow_1.AIMS_flighthours_sum = (int) 0;
					}
					
					if( aggregation.AIMS_flighthours != null)
						operation_result_tAggregateRow_1.AIMS_flighthours_sum += aggregation.AIMS_flighthours;
				} // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_1.AIMS_flightcycles_sum == null) {
						operation_result_tAggregateRow_1.AIMS_flightcycles_sum = (int) 0;
					}
					
					if( aggregation.AIMS_flightcycles != null)
						operation_result_tAggregateRow_1.AIMS_flightcycles_sum += aggregation.AIMS_flightcycles;
					if(operation_result_tAggregateRow_1.AIMS_delays_sum == null) {
						operation_result_tAggregateRow_1.AIMS_delays_sum = (int) 0;
					}
					
					if( aggregation.AIMS_delays != null)
						operation_result_tAggregateRow_1.AIMS_delays_sum += aggregation.AIMS_delays;
					if(operation_result_tAggregateRow_1.AIMS_delayedminutes_sum == null) {
						operation_result_tAggregateRow_1.AIMS_delayedminutes_sum = (int) 0;
					}
					
					if( aggregation.AIMS_delayedminutes != null)
						operation_result_tAggregateRow_1.AIMS_delayedminutes_sum += aggregation.AIMS_delayedminutes;
					if(operation_result_tAggregateRow_1.AIMS_cancellations_sum == null) {
						operation_result_tAggregateRow_1.AIMS_cancellations_sum = (int) 0;
					}
					
					if( aggregation.AIMS_cancellations != null)
						operation_result_tAggregateRow_1.AIMS_cancellations_sum += aggregation.AIMS_cancellations;
					if(operation_result_tAggregateRow_1.AMOS_scheduledoutofservice_sum == null) {
						operation_result_tAggregateRow_1.AMOS_scheduledoutofservice_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.AMOS_scheduledoutofservice_sum = operation_result_tAggregateRow_1.AMOS_scheduledoutofservice_sum.add(
						new BigDecimal(
							String.valueOf(
								aggregation.AMOS_scheduledoutofservice
							)
						)
					);
					
					if(operation_result_tAggregateRow_1.AMOS_unscheduledoutofservice_sum == null) {
						operation_result_tAggregateRow_1.AMOS_unscheduledoutofservice_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.AMOS_unscheduledoutofservice_sum = operation_result_tAggregateRow_1.AMOS_unscheduledoutofservice_sum.add(
						new BigDecimal(
							String.valueOf(
								aggregation.AMOS_unscheduledoutofservice
							)
						)
					);
					


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "aggregation"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tJoin_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 process_data_end ] stop
 */

} // End of branch "AIMS"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJoin_2 end ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"AIMS");
			  	}
			  	
 

ok_Hash.put("tJoin_2", true);
end_Hash.put("tJoin_2", System.currentTimeMillis());




/**
 * [tJoin_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"recovery_join");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */




	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"aggregation");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dbLoading");
					}
				
		int tos_count_tDBOutput_2 = 0;
		






        int updateKeyCount_tDBOutput_2 = 2;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 9 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tDBOutput_2 = 0;
    int nb_line_update_tDBOutput_2 = 0;
    int nb_line_inserted_tDBOutput_2 = 0;
    int nb_line_deleted_tDBOutput_2 = 0;
    int nb_line_rejected_tDBOutput_2 = 0;

    int tmp_batchUpdateCount_tDBOutput_2 = 0;

    int deletedCount_tDBOutput_2=0;
    int updatedCount_tDBOutput_2=0;
    int insertedCount_tDBOutput_2=0;
    int rowsToCommitCount_tDBOutput_2=0;
    int rejectedCount_tDBOutput_2=0;

    boolean whetherReject_tDBOutput_2 = false;

    java.sql.Connection conn_tDBOutput_2 = null;

    //optional table
    String dbschema_tDBOutput_2 = null;
    String tableName_tDBOutput_2 = null;
                    String driverClass_tDBOutput_2 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tDBOutput_2);
                String url_tDBOutput_2 = null;
                    url_tDBOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "oraclefib.fib.upc.edu" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "orabd" + ")))";
                String dbUser_tDBOutput_2 = "odysseas.kyparissis";
 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Apf+44867j2aqcvVvLj/xFU9Rh+x1+2VFBpYv/lm9GxqMOfR");

                String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
                dbschema_tDBOutput_2 = "";


                    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);
        resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
            conn_tDBOutput_2.setAutoCommit(false);
            int commitEvery_tDBOutput_2 = 10000;
            int commitCounter_tDBOutput_2 = 0;
        int count_tDBOutput_2=0;

        if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
            tableName_tDBOutput_2 = ("AIRCRAFTUTILIZATION");
        } else {
            tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "." + ("AIRCRAFTUTILIZATION");
        }
                java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM " + tableName_tDBOutput_2 + " WHERE trim(aircraftID) = ? AND timeID = ?");
                resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
                String insert_tDBOutput_2 = "INSERT INTO " + tableName_tDBOutput_2 + " (aircraftID,flightHours,flightCycles,delays,delayedMinutes,cancellations,timeID,scheduledOutOfService,unScheduledOutOfService) VALUES (?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
                resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
                String update_tDBOutput_2 = "UPDATE " + tableName_tDBOutput_2 + " SET flightHours = ?,flightCycles = ?,delays = ?,delayedMinutes = ?,cancellations = ?,scheduledOutOfService = ?,unScheduledOutOfService = ? WHERE trim(aircraftID) = ? AND timeID = ?";
                java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
                resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);





 



/**
 * [tDBOutput_2 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"aggr_recovery");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/recovery_agg_AIMS_AMOS.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	java.util.Date date;
	Integer AMOS_scheduledoutofservice;
	Integer AMOS_unscheduledoutofservice;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
dbLoadingStruct dbLoading_tmp = new dbLoadingStruct();
aggr_recoveryStruct aggr_recovery_tmp = new aggr_recoveryStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row4.AIMS_aircraftregistration = aggregated_row_tAggregateRow_1.AIMS_aircraftregistration;
            				    row4.AIMS_flighthours = aggregated_row_tAggregateRow_1.AIMS_flighthours_sum;
                                	row4.AIMS_flightcycles = aggregated_row_tAggregateRow_1.AIMS_flightcycles_sum;
                                	row4.AIMS_delays = aggregated_row_tAggregateRow_1.AIMS_delays_sum;
                                	row4.AIMS_delayedminutes = aggregated_row_tAggregateRow_1.AIMS_delayedminutes_sum;
                                	row4.AIMS_cancellations = aggregated_row_tAggregateRow_1.AIMS_cancellations_sum;
                                	
    								if(aggregated_row_tAggregateRow_1.AMOS_scheduledoutofservice_sum != null) {
    								row4.AMOS_scheduledoutofservice = aggregated_row_tAggregateRow_1.AMOS_scheduledoutofservice_sum.floatValue();
										
    								}else{
    								
    									row4.AMOS_scheduledoutofservice = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_1.AMOS_unscheduledoutofservice_sum != null) {
    								row4.AMOS_unscheduledoutofservice = aggregated_row_tAggregateRow_1.AMOS_unscheduledoutofservice_sum.floatValue();
										
    								}else{
    								
    									row4.AMOS_unscheduledoutofservice = null;
    									
    								}
    								
            				    row4.AIMS_date = aggregated_row_tAggregateRow_1.AIMS_date;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.date = TalendDate.parseDate("dd-MM-yyyy",row4.AIMS_date) ;
Var.AMOS_scheduledoutofservice = Math.round(row4.AMOS_scheduledoutofservice) ;
Var.AMOS_unscheduledoutofservice = Math.round(row4.AMOS_unscheduledoutofservice) ;// ###############################
        // ###############################
        // # Output tables

dbLoading = null;
aggr_recovery = null;


// # Output table : 'dbLoading'
dbLoading_tmp.AIMS_aircraftregistration = row4.AIMS_aircraftregistration ;
dbLoading_tmp.AIMS_flighthours = row4.AIMS_flighthours ;
dbLoading_tmp.AIMS_flightcycles = row4.AIMS_flightcycles ;
dbLoading_tmp.AIMS_delays = row4.AIMS_delays ;
dbLoading_tmp.AIMS_delayedminutes = row4.AIMS_delayedminutes ;
dbLoading_tmp.AIMS_cancellations = row4.AIMS_cancellations ;
dbLoading_tmp.date = Var.date ;
dbLoading_tmp.AMOS_scheduledoutofservice = Var.AMOS_scheduledoutofservice ;
dbLoading_tmp.AMOS_unscheduledoutofservice = Var.AMOS_unscheduledoutofservice ;
dbLoading = dbLoading_tmp;

// # Output table : 'aggr_recovery'
aggr_recovery_tmp.AIMS_aircraftregistration = row4.AIMS_aircraftregistration ;
aggr_recovery_tmp.AIMS_flighthours = row4.AIMS_flighthours ;
aggr_recovery_tmp.AIMS_flightcycles = row4.AIMS_flightcycles ;
aggr_recovery_tmp.AIMS_delays = row4.AIMS_delays ;
aggr_recovery_tmp.AIMS_delayedminutes = row4.AIMS_delayedminutes ;
aggr_recovery_tmp.AIMS_cancellations = row4.AIMS_cancellations ;
aggr_recovery_tmp.date = Var.date ;
aggr_recovery_tmp.AMOS_scheduledoutofservice = Var.AMOS_scheduledoutofservice ;
aggr_recovery_tmp.AMOS_unscheduledoutofservice = Var.AMOS_unscheduledoutofservice ;
aggr_recovery = aggr_recovery_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "dbLoading"
if(dbLoading != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"dbLoading"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(dbLoading.AIMS_aircraftregistration == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {if(dbLoading.AIMS_aircraftregistration == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.CHAR);
} else if(dbLoading.AIMS_aircraftregistration == " "){
pstmt_tDBOutput_2.setString(1, "");
} else {
pstmt_tDBOutput_2.setString(1, String.valueOf(dbLoading.AIMS_aircraftregistration));
}}

                    if(dbLoading.date != null) {
pstmt_tDBOutput_2.setObject(2, new java.sql.Timestamp(dbLoading.date.getTime()),java.sql.Types.DATE);
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.DATE);
}

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        if(dbLoading.AIMS_flighthours == null) {
pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(1, dbLoading.AIMS_flighthours);
}

                        if(dbLoading.AIMS_flightcycles == null) {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(2, dbLoading.AIMS_flightcycles);
}

                        if(dbLoading.AIMS_delays == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(3, dbLoading.AIMS_delays);
}

                        if(dbLoading.AIMS_delayedminutes == null) {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(4, dbLoading.AIMS_delayedminutes);
}

                        if(dbLoading.AIMS_cancellations == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(5, dbLoading.AIMS_cancellations);
}

                        if(dbLoading.AMOS_scheduledoutofservice == null) {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(6, dbLoading.AMOS_scheduledoutofservice);
}

                        if(dbLoading.AMOS_unscheduledoutofservice == null) {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(7, dbLoading.AMOS_unscheduledoutofservice);
}

                        if(dbLoading.AIMS_aircraftregistration == null) {
pstmtUpdate_tDBOutput_2.setNull(8 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {if(dbLoading.AIMS_aircraftregistration == null) {
pstmtUpdate_tDBOutput_2.setNull(8 + count_tDBOutput_2, java.sql.Types.CHAR);
} else if(dbLoading.AIMS_aircraftregistration == " "){
pstmtUpdate_tDBOutput_2.setString(8 + count_tDBOutput_2, "");
} else {
pstmtUpdate_tDBOutput_2.setString(8 + count_tDBOutput_2, String.valueOf(dbLoading.AIMS_aircraftregistration));
}}

                        if(dbLoading.date != null) {
pstmtUpdate_tDBOutput_2.setObject(9 + count_tDBOutput_2, new java.sql.Timestamp(dbLoading.date.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tDBOutput_2.setNull(9 + count_tDBOutput_2, java.sql.Types.DATE);
}

                try {
                    int processedCount_tDBOutput_2 = pstmtUpdate_tDBOutput_2.executeUpdate();
                    updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    nb_line_tDBOutput_2++;
                } catch(java.lang.Exception e_tDBOutput_2) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e_tDBOutput_2.getMessage());
                }
            } else {
                        if(dbLoading.AIMS_aircraftregistration == null) {
pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {if(dbLoading.AIMS_aircraftregistration == null) {
pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.CHAR);
} else if(dbLoading.AIMS_aircraftregistration == " "){
pstmtInsert_tDBOutput_2.setString(1, "");
} else {
pstmtInsert_tDBOutput_2.setString(1, String.valueOf(dbLoading.AIMS_aircraftregistration));
}}

                        if(dbLoading.AIMS_flighthours == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(2, dbLoading.AIMS_flighthours);
}

                        if(dbLoading.AIMS_flightcycles == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(3, dbLoading.AIMS_flightcycles);
}

                        if(dbLoading.AIMS_delays == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(4, dbLoading.AIMS_delays);
}

                        if(dbLoading.AIMS_delayedminutes == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(5, dbLoading.AIMS_delayedminutes);
}

                        if(dbLoading.AIMS_cancellations == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(6, dbLoading.AIMS_cancellations);
}

                        if(dbLoading.date != null) {
pstmtInsert_tDBOutput_2.setObject(7, new java.sql.Timestamp(dbLoading.date.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.DATE);
}

                        if(dbLoading.AMOS_scheduledoutofservice == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(8, dbLoading.AMOS_scheduledoutofservice);
}

                        if(dbLoading.AMOS_unscheduledoutofservice == null) {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(9, dbLoading.AMOS_unscheduledoutofservice);
}

                try {
                    int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
                    insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    nb_line_tDBOutput_2++;
                } catch(java.lang.Exception e_tDBOutput_2) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e_tDBOutput_2.getMessage());
                }
            }
                commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "dbLoading"




// Start of branch "aggr_recovery"
if(aggr_recovery != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"aggr_recovery"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(aggr_recovery.AIMS_aircraftregistration != null) {
                        sb_tFileOutputDelimited_2.append(
                            aggr_recovery.AIMS_aircraftregistration
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(aggr_recovery.AIMS_flighthours != null) {
                        sb_tFileOutputDelimited_2.append(
                            aggr_recovery.AIMS_flighthours
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(aggr_recovery.AIMS_flightcycles != null) {
                        sb_tFileOutputDelimited_2.append(
                            aggr_recovery.AIMS_flightcycles
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(aggr_recovery.AIMS_delays != null) {
                        sb_tFileOutputDelimited_2.append(
                            aggr_recovery.AIMS_delays
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(aggr_recovery.AIMS_delayedminutes != null) {
                        sb_tFileOutputDelimited_2.append(
                            aggr_recovery.AIMS_delayedminutes
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(aggr_recovery.AIMS_cancellations != null) {
                        sb_tFileOutputDelimited_2.append(
                            aggr_recovery.AIMS_cancellations
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(aggr_recovery.date != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(aggr_recovery.date, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(aggr_recovery.AMOS_scheduledoutofservice != null) {
                        sb_tFileOutputDelimited_2.append(
                            aggr_recovery.AMOS_scheduledoutofservice
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(aggr_recovery.AMOS_unscheduledoutofservice != null) {
                        sb_tFileOutputDelimited_2.append(
                            aggr_recovery.AMOS_unscheduledoutofservice
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "aggr_recovery"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
	



	
        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
		if(commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {
			
		}
		conn_tDBOutput_2.commit();
		if(commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {
			
			rowsToCommitCount_tDBOutput_2 = 0;
		}
		commitCounter_tDBOutput_2 = 0;
		
		
		conn_tDBOutput_2 .close();
		
		resourceMap.put("finish_tDBOutput_2", true);
   	

	
	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dbLoading");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"aggr_recovery");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						      	
					      			//free memory for "tJoin_2"
									globalMap.remove("tHash_AMOS");
				      			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJoin_2 finally ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */




	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class AMOSStruct implements routines.system.IPersistableComparableLookupRow<AMOSStruct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String AMOS_aircraftregistration;

				public String getAMOS_aircraftregistration () {
					return this.AMOS_aircraftregistration;
				}
				
			    public String AMOS_flightid;

				public String getAMOS_flightid () {
					return this.AMOS_flightid;
				}
				
			    public String AMOS_date;

				public String getAMOS_date () {
					return this.AMOS_date;
				}
				
			    public Float AMOS_scheduledoutofservice;

				public Float getAMOS_scheduledoutofservice () {
					return this.AMOS_scheduledoutofservice;
				}
				
			    public Float AMOS_unscheduledoutofservice;

				public Float getAMOS_unscheduledoutofservice () {
					return this.AMOS_unscheduledoutofservice;
				}
				
			    public String AMOS_delaycode;

				public String getAMOS_delaycode () {
					return this.AMOS_delaycode;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AMOS_aircraftregistration == null) ? 0 : this.AMOS_aircraftregistration.hashCode());
					
						result = prime * result + ((this.AMOS_flightid == null) ? 0 : this.AMOS_flightid.hashCode());
					
						result = prime * result + ((this.AMOS_date == null) ? 0 : this.AMOS_date.hashCode());
					
						result = prime * result + ((this.AMOS_delaycode == null) ? 0 : this.AMOS_delaycode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AMOSStruct other = (AMOSStruct) obj;
		
						if (this.AMOS_aircraftregistration == null) {
							if (other.AMOS_aircraftregistration != null)
								return false;
						
						} else if (!this.AMOS_aircraftregistration.equals(other.AMOS_aircraftregistration))
						
							return false;
					
						if (this.AMOS_flightid == null) {
							if (other.AMOS_flightid != null)
								return false;
						
						} else if (!this.AMOS_flightid.equals(other.AMOS_flightid))
						
							return false;
					
						if (this.AMOS_date == null) {
							if (other.AMOS_date != null)
								return false;
						
						} else if (!this.AMOS_date.equals(other.AMOS_date))
						
							return false;
					
						if (this.AMOS_delaycode == null) {
							if (other.AMOS_delaycode != null)
								return false;
						
						} else if (!this.AMOS_delaycode.equals(other.AMOS_delaycode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(AMOSStruct other) {

		other.AMOS_aircraftregistration = this.AMOS_aircraftregistration;
	            other.AMOS_flightid = this.AMOS_flightid;
	            other.AMOS_date = this.AMOS_date;
	            other.AMOS_scheduledoutofservice = this.AMOS_scheduledoutofservice;
	            other.AMOS_unscheduledoutofservice = this.AMOS_unscheduledoutofservice;
	            other.AMOS_delaycode = this.AMOS_delaycode;
	            
	}

	public void copyKeysDataTo(AMOSStruct other) {

		other.AMOS_aircraftregistration = this.AMOS_aircraftregistration;
	            	other.AMOS_flightid = this.AMOS_flightid;
	            	other.AMOS_date = this.AMOS_date;
	            	other.AMOS_delaycode = this.AMOS_delaycode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AMOS_aircraftregistration = readString(dis);
					
					this.AMOS_flightid = readString(dis);
					
					this.AMOS_date = readString(dis);
					
					this.AMOS_delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.AMOS_aircraftregistration = readString(dis);
					
					this.AMOS_flightid = readString(dis);
					
					this.AMOS_date = readString(dis);
					
					this.AMOS_delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AMOS_aircraftregistration,dos);
					
					// String
				
						writeString(this.AMOS_flightid,dos);
					
					// String
				
						writeString(this.AMOS_date,dos);
					
					// String
				
						writeString(this.AMOS_delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AMOS_aircraftregistration,dos);
					
					// String
				
						writeString(this.AMOS_flightid,dos);
					
					// String
				
						writeString(this.AMOS_date,dos);
					
					// String
				
						writeString(this.AMOS_delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.AMOS_scheduledoutofservice = null;
           				} else {
           			    	this.AMOS_scheduledoutofservice = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.AMOS_unscheduledoutofservice = null;
           				} else {
           			    	this.AMOS_unscheduledoutofservice = objectIn.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.AMOS_scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
						if(this.AMOS_unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.AMOS_scheduledoutofservice == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.AMOS_scheduledoutofservice);
		            	}
					
						if(this.AMOS_unscheduledoutofservice == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.AMOS_unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AMOS_aircraftregistration="+AMOS_aircraftregistration);
		sb.append(",AMOS_flightid="+AMOS_flightid);
		sb.append(",AMOS_date="+AMOS_date);
		sb.append(",AMOS_scheduledoutofservice="+String.valueOf(AMOS_scheduledoutofservice));
		sb.append(",AMOS_unscheduledoutofservice="+String.valueOf(AMOS_unscheduledoutofservice));
		sb.append(",AMOS_delaycode="+AMOS_delaycode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AMOSStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AMOS_aircraftregistration, other.AMOS_aircraftregistration);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.AMOS_flightid, other.AMOS_flightid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.AMOS_date, other.AMOS_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.AMOS_delaycode, other.AMOS_delaycode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String flightid;

				public String getFlightid () {
					return this.flightid;
				}
				
			    public java.util.Date starttime;

				public java.util.Date getStarttime () {
					return this.starttime;
				}
				
			    public String date;

				public String getDate () {
					return this.date;
				}
				
			    public java.util.Date endtime;

				public java.util.Date getEndtime () {
					return this.endtime;
				}
				
			    public String kind;

				public String getKind () {
					return this.kind;
				}
				
			    public String delaycode;

				public String getDelaycode () {
					return this.delaycode;
				}
				
			    public Float scheduledoutofservice;

				public Float getScheduledoutofservice () {
					return this.scheduledoutofservice;
				}
				
			    public Float unscheduledoutofservice;

				public Float getUnscheduledoutofservice () {
					return this.unscheduledoutofservice;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.flightid = readString(dis);
					
					this.starttime = readDate(dis);
					
					this.date = readString(dis);
					
					this.endtime = readDate(dis);
					
					this.kind = readString(dis);
					
					this.delaycode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduledoutofservice = null;
           				} else {
           			    	this.scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledoutofservice = null;
           				} else {
           			    	this.unscheduledoutofservice = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.flightid = readString(dis);
					
					this.starttime = readDate(dis);
					
					this.date = readString(dis);
					
					this.endtime = readDate(dis);
					
					this.kind = readString(dis);
					
					this.delaycode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduledoutofservice = null;
           				} else {
           			    	this.scheduledoutofservice = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledoutofservice = null;
           				} else {
           			    	this.unscheduledoutofservice = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.flightid,dos);
					
					// java.util.Date
				
						writeDate(this.starttime,dos);
					
					// String
				
						writeString(this.date,dos);
					
					// java.util.Date
				
						writeDate(this.endtime,dos);
					
					// String
				
						writeString(this.kind,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
					// Float
				
						if(this.scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.flightid,dos);
					
					// java.util.Date
				
						writeDate(this.starttime,dos);
					
					// String
				
						writeString(this.date,dos);
					
					// java.util.Date
				
						writeDate(this.endtime,dos);
					
					// String
				
						writeString(this.kind,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
					// Float
				
						if(this.scheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.scheduledoutofservice);
		            	}
					
					// Float
				
						if(this.unscheduledoutofservice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.unscheduledoutofservice);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftregistration="+aircraftregistration);
		sb.append(",flightid="+flightid);
		sb.append(",starttime="+String.valueOf(starttime));
		sb.append(",date="+date);
		sb.append(",endtime="+String.valueOf(endtime));
		sb.append(",kind="+kind);
		sb.append(",delaycode="+delaycode);
		sb.append(",scheduledoutofservice="+String.valueOf(scheduledoutofservice));
		sb.append(",unscheduledoutofservice="+String.valueOf(unscheduledoutofservice));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
AMOSStruct AMOS = new AMOSStruct();





	
	/**
	 * [tHash_AMOS begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_AMOS", false);
		start_Hash.put("tHash_AMOS", System.currentTimeMillis());
		
	
	currentComponent="tHash_AMOS";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"AMOS");
					}
				
		int tos_count_tHash_AMOS = 0;
		

				java.util.Map<AMOSStruct, AMOSStruct> tHash_AMOS = new java.util.LinkedHashMap<AMOSStruct, AMOSStruct>();
	            globalMap.put("tHash_AMOS", tHash_AMOS);
			
            

 



/**
 * [tHash_AMOS begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
AMOSStruct AMOS_tmp = new AMOSStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "odysseas.kyparissis";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:vQY1UbZdfX7GObioUFwF2RExwUv7LkrYvWMS6NZ484ZEsuvx");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AMOS";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT DISTINCT oi1.aircraftRegistration, oi1.flightID, oi1.startTime, to_char(oi1.startTime,'DD-MM-YYYY') as date, (oi"
+"1.startTime + oi1.duration) as endTime, oi1.kind,\nCASE WHEN oi1.delayCode IS NULL THEN 'empty' WHEN oi1.delayCode = '' "
+"THEN 'empty' ELSE oi1.delayCode::varchar(10) END,\nround( CAST (EXTRACT(epoch FROM oi1.duration)/3600 as numeric),2) as "
+"scheduledOutOfService, 0 as unscheduledOutOfService\nFROM OperationInterruption oi1\nWHERE kind = 'Maintenance' AND (dur"
+"ation > INTERVAL '60 minutes' AND duration <= INTERVAL '1 days')AND airport IS NOT NULL AND EXISTS (\nSELECT 1\nFROM Ope"
+"rationInterruption oi2\nWHERE oi2.kind IN ('Revision', 'Maintenance') \nAND (oi1.startTime >= oi2.startTime) AND (oi1.st"
+"artTime + oi1.duration) <= (oi2.startTime + oi2.duration) AND oi1.aircraftRegistration = oi2.aircraftRegistration\nAND o"
+"i1.airport = oi2.airport AND ((oi2.kind = 'Revision' AND (duration >= INTERVAL '1 days' AND duration <= INTERVAL '1 mont"
+"hs')) OR (oi2.kind = 'Maintenance'))\nAND airport IS NOT NULL)\nUNION\nSELECT DISTINCT aircraftRegistration, flightID,  "
+"startTime, to_char(startTime,'DD-MM-YYYY') as date, (startTime + duration) as endTime, kind,\nCASE WHEN delayCode IS NUL"
+"L THEN 'empty' WHEN delayCode = '' THEN 'empty' ELSE delayCode::varchar(10) END,\n0 as scheduledOutOfService, round(CAST"
+" (EXTRACT(epoch FROM duration)/3600 as numeric),2) as unscheduledOutOfService\nFROM OperationInterruption\nWHERE kind NO"
+"T IN  ('Revision', 'Maintenance')\nAND \n((kind = 'Delay' AND duration < INTERVAL '60 minutes') OR (kind = 'AircraftOnGr"
+"ound' AND (duration > INTERVAL '60 minutes' AND duration < INTERVAL '1 days')))\nAND airport IS NOT NULL";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.aircraftregistration = null;
							} else {
	                         		
        	row1.aircraftregistration = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.flightid = null;
							} else {
	                         		
        	row1.flightid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.starttime = null;
							} else {
										
			row1.starttime = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 3);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.date = null;
							} else {
	                         		
        	row1.date = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.endtime = null;
							} else {
										
			row1.endtime = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 5);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row1.kind = null;
							} else {
	                         		
        	row1.kind = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row1.delaycode = null;
							} else {
	                         		
        	row1.delaycode = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row1.scheduledoutofservice = null;
							} else {
		                          
            row1.scheduledoutofservice = rs_tDBInput_2.getFloat(8);
            if(rs_tDBInput_2.wasNull()){
                    row1.scheduledoutofservice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row1.unscheduledoutofservice = null;
							} else {
		                          
            row1.unscheduledoutofservice = rs_tDBInput_2.getFloat(9);
            if(rs_tDBInput_2.wasNull()){
                    row1.unscheduledoutofservice = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

AMOS = null;


// # Output table : 'AMOS'
AMOS_tmp.AMOS_aircraftregistration = row1.aircraftregistration ;
AMOS_tmp.AMOS_flightid = row1.flightid ;
AMOS_tmp.AMOS_date = row1.date ;
AMOS_tmp.AMOS_scheduledoutofservice = row1.scheduledoutofservice ;
AMOS_tmp.AMOS_unscheduledoutofservice = row1.unscheduledoutofservice ;
AMOS_tmp.AMOS_delaycode = row1.delaycode ;
AMOS = AMOS_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "AMOS"
if(AMOS != null) { 



	
	/**
	 * [tHash_AMOS main ] start
	 */

	

	
	
	currentComponent="tHash_AMOS";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"AMOS"
						
						);
					}
					

AMOSStruct AMOS_HashRow = new AMOSStruct();

					AMOS_HashRow.AMOS_aircraftregistration = AMOS.AMOS_aircraftregistration;
					AMOS_HashRow.AMOS_flightid = AMOS.AMOS_flightid;
					AMOS_HashRow.AMOS_date = AMOS.AMOS_date;
					AMOS_HashRow.AMOS_scheduledoutofservice = AMOS.AMOS_scheduledoutofservice;
					AMOS_HashRow.AMOS_unscheduledoutofservice = AMOS.AMOS_unscheduledoutofservice;
					AMOS_HashRow.AMOS_delaycode = AMOS.AMOS_delaycode;
tHash_AMOS.put(AMOS_HashRow, AMOS_HashRow);


 


	tos_count_tHash_AMOS++;

/**
 * [tHash_AMOS main ] stop
 */
	
	/**
	 * [tHash_AMOS process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_AMOS";

	

 



/**
 * [tHash_AMOS process_data_begin ] stop
 */
	
	/**
	 * [tHash_AMOS process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_AMOS";

	

 



/**
 * [tHash_AMOS process_data_end ] stop
 */

} // End of branch "AMOS"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tHash_AMOS end ] start
	 */

	

	
	
	currentComponent="tHash_AMOS";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"AMOS");
			  	}
			  	
 

ok_Hash.put("tHash_AMOS", true);
end_Hash.put("tHash_AMOS", System.currentTimeMillis());




/**
 * [tHash_AMOS end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tHash_AMOS finally ] start
	 */

	

	
	
	currentComponent="tHash_AMOS";

	

 



/**
 * [tHash_AMOS finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public int personID;

				public int getPersonID () {
					return this.personID;
				}
				
			    public String aircraftID;

				public String getAircraftID () {
					return this.aircraftID;
				}
				
			    public String monthID;

				public String getMonthID () {
					return this.monthID;
				}
				
			    public int counter;

				public int getCounter () {
					return this.counter;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
			        this.personID = dis.readInt();
					
					this.aircraftID = readString(dis);
					
					this.monthID = readString(dis);
					
			        this.counter = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
			        this.personID = dis.readInt();
					
					this.aircraftID = readString(dis);
					
					this.monthID = readString(dis);
					
			        this.counter = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.personID);
					
					// String
				
						writeString(this.aircraftID,dos);
					
					// String
				
						writeString(this.monthID,dos);
					
					// int
				
		            	dos.writeInt(this.counter);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.personID);
					
					// String
				
						writeString(this.aircraftID,dos);
					
					// String
				
						writeString(this.monthID,dos);
					
					// int
				
		            	dos.writeInt(this.counter);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("personID="+String.valueOf(personID));
		sb.append(",aircraftID="+aircraftID);
		sb.append(",monthID="+monthID);
		sb.append(",counter="+String.valueOf(counter));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public int personID;

				public int getPersonID () {
					return this.personID;
				}
				
			    public String aircraftID;

				public String getAircraftID () {
					return this.aircraftID;
				}
				
			    public String monthID;

				public String getMonthID () {
					return this.monthID;
				}
				
			    public int counter;

				public int getCounter () {
					return this.counter;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
			        this.personID = dis.readInt();
					
					this.aircraftID = readString(dis);
					
					this.monthID = readString(dis);
					
			        this.counter = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
			        this.personID = dis.readInt();
					
					this.aircraftID = readString(dis);
					
					this.monthID = readString(dis);
					
			        this.counter = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.personID);
					
					// String
				
						writeString(this.aircraftID,dos);
					
					// String
				
						writeString(this.monthID,dos);
					
					// int
				
		            	dos.writeInt(this.counter);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.personID);
					
					// String
				
						writeString(this.aircraftID,dos);
					
					// String
				
						writeString(this.monthID,dos);
					
					// int
				
		            	dos.writeInt(this.counter);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("personID="+String.valueOf(personID));
		sb.append(",aircraftID="+aircraftID);
		sb.append(",monthID="+monthID);
		sb.append(",counter="+String.valueOf(counter));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DW_TRAINING_FactTables = new byte[0];
    static byte[] commonByteArray_DW_TRAINING_FactTables = new byte[0];

	
			    public int workorderid;

				public int getWorkorderid () {
					return this.workorderid;
				}
				
			    public int reporteurid;

				public int getReporteurid () {
					return this.reporteurid;
				}
				
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String month;

				public String getMonth () {
					return this.month;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_TRAINING_FactTables.length) {
				if(length < 1024 && commonByteArray_DW_TRAINING_FactTables.length == 0) {
   					commonByteArray_DW_TRAINING_FactTables = new byte[1024];
				} else {
   					commonByteArray_DW_TRAINING_FactTables = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_TRAINING_FactTables, 0, length);
			strReturn = new String(commonByteArray_DW_TRAINING_FactTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
			        this.workorderid = dis.readInt();
					
			        this.reporteurid = dis.readInt();
					
					this.aircraftregistration = readString(dis);
					
					this.month = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_TRAINING_FactTables) {

        	try {

        		int length = 0;
		
			        this.workorderid = dis.readInt();
					
			        this.reporteurid = dis.readInt();
					
					this.aircraftregistration = readString(dis);
					
					this.month = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.workorderid);
					
					// int
				
		            	dos.writeInt(this.reporteurid);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.month,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.workorderid);
					
					// int
				
		            	dos.writeInt(this.reporteurid);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.month,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("workorderid="+String.valueOf(workorderid));
		sb.append(",reporteurid="+String.valueOf(reporteurid));
		sb.append(",aircraftregistration="+aircraftregistration);
		sb.append(",month="+month);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();




	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				int reporteurid;
    				String aircraftregistration;
    				String month;int count = 0;
       			int counter_clmCount = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
								result = prime * result + (int) this.reporteurid;
							
							result = prime * result + ((this.aircraftregistration == null) ? 0 : this.aircraftregistration.hashCode());
							
							result = prime * result + ((this.month == null) ? 0 : this.month.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
							if (this.reporteurid != other.reporteurid) 
								return false;
						
							if (this.aircraftregistration == null) {
								if (other.aircraftregistration != null) 
									return false;
							} else if (!this.aircraftregistration.equals(other.aircraftregistration)) 
								return false;
						
							if (this.month == null) {
								if (other.month != null) 
									return false;
							} else if (!this.month.equals(other.month)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "odysseas.kyparissis";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:1Wr9J3zq+Oa/sht2q81SHAZYUdo6Rbob2d1D/iQSrwZQiD4i");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AMOS";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT DISTINCT workOrderID, reporteurID, aircraftRegistration, to_char(executionDate,'MM-YYYY') as month\nFROM Technic"
+"alLogBookOrders\nWHERE executionDate IS NOT NULL";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row5.workorderid = 0;
							} else {
		                          
            row5.workorderid = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row5.reporteurid = 0;
							} else {
		                          
            row5.reporteurid = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row5.aircraftregistration = null;
							} else {
	                         		
        	row5.aircraftregistration = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row5.month = null;
							} else {
	                         		
        	row5.month = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
	
operation_finder_tAggregateRow_2.reporteurid = row5.reporteurid;
			operation_finder_tAggregateRow_2.aircraftregistration = row5.aircraftregistration;
			operation_finder_tAggregateRow_2.month = row5.month;
			

	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		operation_result_tAggregateRow_2.reporteurid = operation_finder_tAggregateRow_2.reporteurid;
				operation_result_tAggregateRow_2.aircraftregistration = operation_finder_tAggregateRow_2.aircraftregistration;
				operation_result_tAggregateRow_2.month = operation_finder_tAggregateRow_2.month;
				
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
				operation_result_tAggregateRow_2.counter_clmCount++;
				operation_result_tAggregateRow_2.count++;
				


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */


	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






        int updateKeyCount_tDBOutput_1 = 3;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 4 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tDBOutput_1 = 0;
    int nb_line_update_tDBOutput_1 = 0;
    int nb_line_inserted_tDBOutput_1 = 0;
    int nb_line_deleted_tDBOutput_1 = 0;
    int nb_line_rejected_tDBOutput_1 = 0;

    int tmp_batchUpdateCount_tDBOutput_1 = 0;

    int deletedCount_tDBOutput_1=0;
    int updatedCount_tDBOutput_1=0;
    int insertedCount_tDBOutput_1=0;
    int rowsToCommitCount_tDBOutput_1=0;
    int rejectedCount_tDBOutput_1=0;

    boolean whetherReject_tDBOutput_1 = false;

    java.sql.Connection conn_tDBOutput_1 = null;

    //optional table
    String dbschema_tDBOutput_1 = null;
    String tableName_tDBOutput_1 = null;
                    String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tDBOutput_1);
                String url_tDBOutput_1 = null;
                    url_tDBOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "oraclefib.fib.upc.edu" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "orabd" + ")))";
                String dbUser_tDBOutput_1 = "odysseas.kyparissis";
 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:kQT3qHlsZ9csrshsvIOLCa52ywVuxKQOw7/Y5AFbdwDRBV69");

                String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
                dbschema_tDBOutput_1 = "";


                    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
        resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
            conn_tDBOutput_1.setAutoCommit(false);
            int commitEvery_tDBOutput_1 = 10000;
            int commitCounter_tDBOutput_1 = 0;
        int count_tDBOutput_1=0;

        if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
            tableName_tDBOutput_1 = ("LOGBOOKREPORTING");
        } else {
            tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("LOGBOOKREPORTING");
        }
                java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM " + tableName_tDBOutput_1 + " WHERE trim(personID) = ? AND trim(aircraftID) = ? AND trim(monthID) = ?");
                resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
                String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1 + " (personID,aircraftID,monthID,counter) VALUES (?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
                resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
                String update_tDBOutput_1 = "UPDATE " + tableName_tDBOutput_1 + " SET counter = ? WHERE trim(personID) = ? AND trim(aircraftID) = ? AND trim(monthID) = ?";
                java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
                resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);





 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

            				    row6.personID = aggregated_row_tAggregateRow_2.reporteurid;
            				    
            				    row6.aircraftID = aggregated_row_tAggregateRow_2.aircraftregistration;
            				    
            				    row6.monthID = aggregated_row_tAggregateRow_2.month;
            				    row6.counter = (int) aggregated_row_tAggregateRow_2.count;
	                                	row6.counter = (int) aggregated_row_tAggregateRow_2.counter_clmCount;
	                                	

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, row6.personID);

                    if(row6.aircraftID == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {if(row6.aircraftID == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.CHAR);
} else if(row6.aircraftID == " "){
pstmt_tDBOutput_1.setString(2, "");
} else {
pstmt_tDBOutput_1.setString(2, String.valueOf(row6.aircraftID));
}}

                    if(row6.monthID == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {if(row6.monthID == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.CHAR);
} else if(row6.monthID == " "){
pstmt_tDBOutput_1.setString(3, "");
} else {
pstmt_tDBOutput_1.setString(3, String.valueOf(row6.monthID));
}}

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        pstmtUpdate_tDBOutput_1.setInt(1, row6.counter);

                        pstmtUpdate_tDBOutput_1.setInt(2 + count_tDBOutput_1, row6.personID);

                        if(row6.aircraftID == null) {
pstmtUpdate_tDBOutput_1.setNull(3 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {if(row6.aircraftID == null) {
pstmtUpdate_tDBOutput_1.setNull(3 + count_tDBOutput_1, java.sql.Types.CHAR);
} else if(row6.aircraftID == " "){
pstmtUpdate_tDBOutput_1.setString(3 + count_tDBOutput_1, "");
} else {
pstmtUpdate_tDBOutput_1.setString(3 + count_tDBOutput_1, String.valueOf(row6.aircraftID));
}}

                        if(row6.monthID == null) {
pstmtUpdate_tDBOutput_1.setNull(4 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {if(row6.monthID == null) {
pstmtUpdate_tDBOutput_1.setNull(4 + count_tDBOutput_1, java.sql.Types.CHAR);
} else if(row6.monthID == " "){
pstmtUpdate_tDBOutput_1.setString(4 + count_tDBOutput_1, "");
} else {
pstmtUpdate_tDBOutput_1.setString(4 + count_tDBOutput_1, String.valueOf(row6.monthID));
}}

                try {
                    int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
                    updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e_tDBOutput_1) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e_tDBOutput_1.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setInt(1, row6.personID);

                        if(row6.aircraftID == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {if(row6.aircraftID == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.CHAR);
} else if(row6.aircraftID == " "){
pstmtInsert_tDBOutput_1.setString(2, "");
} else {
pstmtInsert_tDBOutput_1.setString(2, String.valueOf(row6.aircraftID));
}}

                        if(row6.monthID == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {if(row6.monthID == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.CHAR);
} else if(row6.monthID == " "){
pstmtInsert_tDBOutput_1.setString(3, "");
} else {
pstmtInsert_tDBOutput_1.setString(3, String.valueOf(row6.monthID));
}}

                        pstmtInsert_tDBOutput_1.setInt(4, row6.counter);

                try {
                    int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
                    insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e_tDBOutput_1) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e_tDBOutput_1.getMessage());
                }
            }
                commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
	



	
        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
		if(commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
			
		}
		conn_tDBOutput_1.commit();
		if(commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
			
			rowsToCommitCount_tDBOutput_1 = 0;
		}
		commitCounter_tDBOutput_1 = 0;
		
		
		conn_tDBOutput_1 .close();
		
		resourceMap.put("finish_tDBOutput_1", true);
   	

	
	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final FactTables FactTablesClass = new FactTables();

        int exitCode = FactTablesClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = FactTables.class.getClassLoader().getResourceAsStream("dw_training/facttables_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = FactTables.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}catch (java.lang.Error e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}catch (java.lang.Error e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FactTables");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     322417 characters generated by Talend Open Studio for Data Integration 
 *     on the November 30, 2022 at 4:40:43 PM CET
 ************************************************************************************************/