// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dw_training.controljobs_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ControlJobs Purpose: Job controller for ordering executions of jobs<br>
 * Description: Job controller for ordering executions of jobs <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class ControlJobs implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ControlJobs";
	private final String projectName = "DW_TRAINING";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ControlJobs.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ControlJobs.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				class DealChildJobLibrary_tRunJob_3 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new java.io.ObjectInputStream(
									new java.io.FileInputStream(crcMapPath)) {
								@Override
								public Class<?> resolveClass(java.io.ObjectStreamClass desc)
										throws java.io.IOException, ClassNotFoundException {
									if (!"java.util.HashMap".equals(desc.getName())) {
										throw new java.io.InvalidClassException(
												"Unauthorized deserialization attempt : " + desc.getName());
									}
									return super.resolveClass(desc);
								}
							};
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_3 dealChildJobLibrary_tRunJob_3 = new DealChildJobLibrary_tRunJob_3();

				class JVMArgumentHelper_tRunJob_3 {

					private void addClasspath(java.util.List<String> target_argument_list,
							String job_origin_classpath) {

						String extra_classpath = null;
						String path_separator = System.getProperty("path.separator");
						if (path_separator != null && path_separator.length() > 1) {
							throw new RuntimeException("path separator should be single character");
						}

						if (extra_classpath != null && !extra_classpath.isEmpty()) {
							if (extra_classpath.endsWith(path_separator)) {
								target_argument_list.add(extra_classpath + job_origin_classpath);
							} else if (extra_classpath.contains(path_separator)) {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							} else if (extra_classpath.endsWith(":")) {
								target_argument_list
										.add(extra_classpath.replace(":", path_separator) + job_origin_classpath);
							} else if (extra_classpath.endsWith(";")) {
								target_argument_list
										.add(extra_classpath.replace(";", path_separator) + job_origin_classpath);
							} else if (extra_classpath.contains(":")) {
								target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator),
										path_separator, job_origin_classpath));
							} else if (extra_classpath.contains(";")) {
								target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator),
										path_separator, job_origin_classpath));
							} else {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							}
							return;
						}

						target_argument_list.add(job_origin_classpath);
					}

					private String concatStr(String s1, String s2, String s3) {
						java.lang.StringBuilder strB = new java.lang.StringBuilder();
						strB.append(s1).append(s2).append(s3);
						return strB.toString();
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {
						addArgumentsTo(target_argument_list, argument_from_child, false);
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child,
							boolean isCP) {
						if (isCP) {
							addClasspath(target_argument_list, argument_from_child);
							return;
						}

						target_argument_list.add(argument_from_child);

					}

				}

				JVMArgumentHelper_tRunJob_3 jvm_argument_helper_tRunJob_3 = new JVMArgumentHelper_tRunJob_3();

				String audit_jar_path_tRunJob_3 = System.getProperty("classpath.extended");

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				String osName_tRunJob_3 = System.getProperty("os.name");
				if (osName_tRunJob_3 != null && osName_tRunJob_3.toLowerCase().startsWith("win")) {

					paraList_tRunJob_3.add("C:/Program Files/Java/jdk-19/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_3.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_3 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_3 != null) {
							paraList_tRunJob_3.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_3);
						}
						String log4j2_config_tRunJob_3 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_3 != null) {
							paraList_tRunJob_3.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_3);
						}
						if (log4j1_config_tRunJob_3 != null || log4j2_config_tRunJob_3 != null) {
							paraList_tRunJob_3.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_3.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_3.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx8192M");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");

					String classpath_tRunJob_3_6 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/jobs/process/monthdimension_0.1/target/classpath.jar;";

					if (audit_jar_path_tRunJob_3 != null && !audit_jar_path_tRunJob_3.isEmpty()) {
						classpath_tRunJob_3_6 += audit_jar_path_tRunJob_3;
					}

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(classpath_tRunJob_3_6), true);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							"dw_training.monthdimension_0_1.monthDimension");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "%*");

				} else {

					paraList_tRunJob_3.add("C:/Program Files/Java/jdk-19/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_3.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_3 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_3 != null) {
							paraList_tRunJob_3.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_3);
						}
						String log4j2_config_tRunJob_3 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_3 != null) {
							paraList_tRunJob_3.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_3);
						}
						if (log4j1_config_tRunJob_3 != null || log4j2_config_tRunJob_3 != null) {
							paraList_tRunJob_3.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_3.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_3.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx8192M");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");

					String classpath_tRunJob_3_6 = "C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/jobs/process/monthdimension_0.1/target/classes:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/jobs/process/monthdimension_0.1/src/main/ext-resources:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/code/routines/target/classes:.:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.13.2/log4j-slf4j-impl-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.13.2/log4j-api-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.13.2/log4j-core-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/com/oracle/ojdbc/ojdbc8/19.3.0.0/ojdbc8-19.3.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/jboss/marshalling/jboss-marshalling/2.0.12.Final/jboss-marshalling-2.0.12.Final.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/libraries/talend-oracle-timestamptz/6.0.0/talend-oracle-timestamptz-6.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.29/slf4j-api-1.7.29.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/postgresql/postgresql/42.2.14/postgresql-42.2.14.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/daikon/crypto-utils/0.31.12/crypto-utils-0.31.12.jar:";

					if (audit_jar_path_tRunJob_3 != null && !audit_jar_path_tRunJob_3.isEmpty()) {
						classpath_tRunJob_3_6 += audit_jar_path_tRunJob_3;
					}

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(classpath_tRunJob_3_6)
									.replace("$ROOT_PATH", System.getProperty("user.dir")),
							true);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							"dw_training.monthdimension_0_1.monthDimension");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_3.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_3 = null;

				class ConsoleHelper_tRunJob_3 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_3_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_3_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_3 consoleHelper_tRunJob_3 = new ConsoleHelper_tRunJob_3();

				Runtime runtime_tRunJob_3 = Runtime.getRuntime();
				Process ps_tRunJob_3 = null;

				// 0 indicates normal termination
				int result_tRunJob_3;
				StringBuffer errorMsg_tRunJob_3 = new StringBuffer();
				try {
					ps_tRunJob_3 = runtime_tRunJob_3
							.exec((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

					Thread normal_tRunJob_3 = consoleHelper_tRunJob_3.getNormalThread(ps_tRunJob_3);
					normal_tRunJob_3.start();

					Thread error_tRunJob_3 = consoleHelper_tRunJob_3.getErrorThread(ps_tRunJob_3, errorMsg_tRunJob_3);
					error_tRunJob_3.start();

					result_tRunJob_3 = ps_tRunJob_3.waitFor();
					normal_tRunJob_3.join();
					error_tRunJob_3.join();
				} catch (ThreadDeath tde) {
					globalMap.put("tRunJob_3_ERROR_MESSAGE", tde.getMessage());
					ps_tRunJob_3.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", result_tRunJob_3);
				if (result_tRunJob_3 != 0) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_3.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_3
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_3.toString());

				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 process_data_begin ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_3 process_data_end ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_end ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tRunJob_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				class DealChildJobLibrary_tRunJob_1 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new java.io.ObjectInputStream(
									new java.io.FileInputStream(crcMapPath)) {
								@Override
								public Class<?> resolveClass(java.io.ObjectStreamClass desc)
										throws java.io.IOException, ClassNotFoundException {
									if (!"java.util.HashMap".equals(desc.getName())) {
										throw new java.io.InvalidClassException(
												"Unauthorized deserialization attempt : " + desc.getName());
									}
									return super.resolveClass(desc);
								}
							};
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

				class JVMArgumentHelper_tRunJob_1 {

					private void addClasspath(java.util.List<String> target_argument_list,
							String job_origin_classpath) {

						String extra_classpath = null;
						String path_separator = System.getProperty("path.separator");
						if (path_separator != null && path_separator.length() > 1) {
							throw new RuntimeException("path separator should be single character");
						}

						if (extra_classpath != null && !extra_classpath.isEmpty()) {
							if (extra_classpath.endsWith(path_separator)) {
								target_argument_list.add(extra_classpath + job_origin_classpath);
							} else if (extra_classpath.contains(path_separator)) {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							} else if (extra_classpath.endsWith(":")) {
								target_argument_list
										.add(extra_classpath.replace(":", path_separator) + job_origin_classpath);
							} else if (extra_classpath.endsWith(";")) {
								target_argument_list
										.add(extra_classpath.replace(";", path_separator) + job_origin_classpath);
							} else if (extra_classpath.contains(":")) {
								target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator),
										path_separator, job_origin_classpath));
							} else if (extra_classpath.contains(";")) {
								target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator),
										path_separator, job_origin_classpath));
							} else {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							}
							return;
						}

						target_argument_list.add(job_origin_classpath);
					}

					private String concatStr(String s1, String s2, String s3) {
						java.lang.StringBuilder strB = new java.lang.StringBuilder();
						strB.append(s1).append(s2).append(s3);
						return strB.toString();
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {
						addArgumentsTo(target_argument_list, argument_from_child, false);
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child,
							boolean isCP) {
						if (isCP) {
							addClasspath(target_argument_list, argument_from_child);
							return;
						}

						target_argument_list.add(argument_from_child);

					}

				}

				JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();

				String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				String osName_tRunJob_1 = System.getProperty("os.name");
				if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase().startsWith("win")) {

					paraList_tRunJob_1.add("C:/Program Files/Java/jdk-19/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
						}
						String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
						}
						if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx8192M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					String classpath_tRunJob_1_6 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/jobs/process/restofdimensions_0.1/target/classpath.jar;";

					if (audit_jar_path_tRunJob_1 != null && !audit_jar_path_tRunJob_1.isEmpty()) {
						classpath_tRunJob_1_6 += audit_jar_path_tRunJob_1;
					}

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_6), true);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"dw_training.restofdimensions_0_1.restOfDimensions");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");

				} else {

					paraList_tRunJob_1.add("C:/Program Files/Java/jdk-19/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
						}
						String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
						}
						if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
							paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx8192M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					String classpath_tRunJob_1_6 = "C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/jobs/process/restofdimensions_0.1/target/classes:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/jobs/process/restofdimensions_0.1/src/main/ext-resources:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/code/routines/target/classes:.:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.13.2/log4j-slf4j-impl-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.13.2/log4j-api-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.13.2/log4j-core-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/com/oracle/ojdbc/ojdbc8/19.3.0.0/ojdbc8-19.3.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/jboss/marshalling/jboss-marshalling/2.0.12.Final/jboss-marshalling-2.0.12.Final.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/libraries/talend-oracle-timestamptz/6.0.0/talend-oracle-timestamptz-6.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/components/lib/talend_file_enhanced/1.1/talend_file_enhanced-1.1.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.29/slf4j-api-1.7.29.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/postgresql/postgresql/42.2.14/postgresql-42.2.14.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/components/talendcsv/1.0.0/talendcsv-1.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/daikon/crypto-utils/0.31.12/crypto-utils-0.31.12.jar:";

					if (audit_jar_path_tRunJob_1 != null && !audit_jar_path_tRunJob_1.isEmpty()) {
						classpath_tRunJob_1_6 += audit_jar_path_tRunJob_1;
					}

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_6)
									.replace("$ROOT_PATH", System.getProperty("user.dir")),
							true);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"dw_training.restofdimensions_0_1.restOfDimensions");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_1.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_1 = null;

				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_1_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_1_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

				Runtime runtime_tRunJob_1 = Runtime.getRuntime();
				Process ps_tRunJob_1 = null;

				// 0 indicates normal termination
				int result_tRunJob_1;
				StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
				try {
					ps_tRunJob_1 = runtime_tRunJob_1
							.exec((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

					Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
					normal_tRunJob_1.start();

					Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
					error_tRunJob_1.start();

					result_tRunJob_1 = ps_tRunJob_1.waitFor();
					normal_tRunJob_1.join();
					error_tRunJob_1.join();
				} catch (ThreadDeath tde) {
					globalMap.put("tRunJob_1_ERROR_MESSAGE", tde.getMessage());
					ps_tRunJob_1.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", result_tRunJob_1);
				if (result_tRunJob_1 != 0) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_1.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_1
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());

				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 process_data_begin ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_1 process_data_end ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tRunJob_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				class DealChildJobLibrary_tRunJob_2 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new java.io.ObjectInputStream(
									new java.io.FileInputStream(crcMapPath)) {
								@Override
								public Class<?> resolveClass(java.io.ObjectStreamClass desc)
										throws java.io.IOException, ClassNotFoundException {
									if (!"java.util.HashMap".equals(desc.getName())) {
										throw new java.io.InvalidClassException(
												"Unauthorized deserialization attempt : " + desc.getName());
									}
									return super.resolveClass(desc);
								}
							};
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

				class JVMArgumentHelper_tRunJob_2 {

					private void addClasspath(java.util.List<String> target_argument_list,
							String job_origin_classpath) {

						String extra_classpath = null;
						String path_separator = System.getProperty("path.separator");
						if (path_separator != null && path_separator.length() > 1) {
							throw new RuntimeException("path separator should be single character");
						}

						if (extra_classpath != null && !extra_classpath.isEmpty()) {
							if (extra_classpath.endsWith(path_separator)) {
								target_argument_list.add(extra_classpath + job_origin_classpath);
							} else if (extra_classpath.contains(path_separator)) {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							} else if (extra_classpath.endsWith(":")) {
								target_argument_list
										.add(extra_classpath.replace(":", path_separator) + job_origin_classpath);
							} else if (extra_classpath.endsWith(";")) {
								target_argument_list
										.add(extra_classpath.replace(";", path_separator) + job_origin_classpath);
							} else if (extra_classpath.contains(":")) {
								target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator),
										path_separator, job_origin_classpath));
							} else if (extra_classpath.contains(";")) {
								target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator),
										path_separator, job_origin_classpath));
							} else {
								target_argument_list
										.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
							}
							return;
						}

						target_argument_list.add(job_origin_classpath);
					}

					private String concatStr(String s1, String s2, String s3) {
						java.lang.StringBuilder strB = new java.lang.StringBuilder();
						strB.append(s1).append(s2).append(s3);
						return strB.toString();
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {
						addArgumentsTo(target_argument_list, argument_from_child, false);
					}

					public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child,
							boolean isCP) {
						if (isCP) {
							addClasspath(target_argument_list, argument_from_child);
							return;
						}

						target_argument_list.add(argument_from_child);

					}

				}

				JVMArgumentHelper_tRunJob_2 jvm_argument_helper_tRunJob_2 = new JVMArgumentHelper_tRunJob_2();

				String audit_jar_path_tRunJob_2 = System.getProperty("classpath.extended");

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				String osName_tRunJob_2 = System.getProperty("os.name");
				if (osName_tRunJob_2 != null && osName_tRunJob_2.toLowerCase().startsWith("win")) {

					paraList_tRunJob_2.add("C:/Program Files/Java/jdk-19/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_2.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_2 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_2);
						}
						String log4j2_config_tRunJob_2 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_2);
						}
						if (log4j1_config_tRunJob_2 != null || log4j2_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx8192M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					String classpath_tRunJob_2_6 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/jobs/process/facttables_0.1/target/classpath.jar;";

					if (audit_jar_path_tRunJob_2 != null && !audit_jar_path_tRunJob_2.isEmpty()) {
						classpath_tRunJob_2_6 += audit_jar_path_tRunJob_2;
					}

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(classpath_tRunJob_2_6), true);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"dw_training.facttables_0_1.FactTables");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "%*");

				} else {

					paraList_tRunJob_2.add("C:/Program Files/Java/jdk-19/bin/java.exe");
					String m2 = System.getProperty("talend.component.manager.m2.repository");
					if (m2 != null) {
						paraList_tRunJob_2.add("-Dtalend.component.manager.m2.repository=" + m2);
					}

					if (Boolean.getBoolean("propagateLoggingConfiguration")) {
						String log4j1_config_tRunJob_2 = System.getProperty("log4j.configuration");
						if (log4j1_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_2);
						}
						String log4j2_config_tRunJob_2 = System.getProperty("log4j.configurationFile");
						if (log4j2_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_2);
						}
						if (log4j1_config_tRunJob_2 != null || log4j2_config_tRunJob_2 != null) {
							paraList_tRunJob_2.add("-DpropagateLoggingConfiguration=true");
						}
					}

					if (enableLogStash) {
						System.getProperties().stringPropertyNames().stream().filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
					}

					System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx8192M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"-Dtalend.component.manager.m2.repository=C:/Program Files (x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					String classpath_tRunJob_2_6 = "C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/jobs/process/facttables_0.1/target/classes:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/jobs/process/facttables_0.1/src/main/ext-resources:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/workspace/DW_TRAINING/poms/code/routines/target/classes:.:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.13.2/log4j-slf4j-impl-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.13.2/log4j-api-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.13.2/log4j-core-2.13.2.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/com/oracle/ojdbc/ojdbc8/19.3.0.0/ojdbc8-19.3.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/jboss/marshalling/jboss-marshalling/2.0.12.Final/jboss-marshalling-2.0.12.Final.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/libraries/talend-oracle-timestamptz/6.0.0/talend-oracle-timestamptz-6.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.29/slf4j-api-1.7.29.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/postgresql/postgresql/42.2.14/postgresql-42.2.14.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/components/talendcsv/1.0.0/talendcsv-1.0.0.jar:C:/Program%20Files%20(x86)/TOS_DI-8.0.1/studio/configuration/.m2/repository/org/talend/daikon/crypto-utils/0.31.12/crypto-utils-0.31.12.jar:";

					if (audit_jar_path_tRunJob_2 != null && !audit_jar_path_tRunJob_2.isEmpty()) {
						classpath_tRunJob_2_6 += audit_jar_path_tRunJob_2;
					}

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(classpath_tRunJob_2_6)
									.replace("$ROOT_PATH", System.getProperty("user.dir")),
							true);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"dw_training.facttables_0_1.FactTables");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_2.add("--audit.enabled=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				class ConsoleHelper_tRunJob_2 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_2_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
									globalMap.put("tRunJob_2_ERROR_MESSAGE", ioe.getMessage());

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_2 consoleHelper_tRunJob_2 = new ConsoleHelper_tRunJob_2();

				Runtime runtime_tRunJob_2 = Runtime.getRuntime();
				Process ps_tRunJob_2 = null;

				// 0 indicates normal termination
				int result_tRunJob_2;
				StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
				try {
					ps_tRunJob_2 = runtime_tRunJob_2
							.exec((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

					Thread normal_tRunJob_2 = consoleHelper_tRunJob_2.getNormalThread(ps_tRunJob_2);
					normal_tRunJob_2.start();

					Thread error_tRunJob_2 = consoleHelper_tRunJob_2.getErrorThread(ps_tRunJob_2, errorMsg_tRunJob_2);
					error_tRunJob_2.start();

					result_tRunJob_2 = ps_tRunJob_2.waitFor();
					normal_tRunJob_2.join();
					error_tRunJob_2.join();
				} catch (ThreadDeath tde) {
					globalMap.put("tRunJob_2_ERROR_MESSAGE", tde.getMessage());
					ps_tRunJob_2.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", result_tRunJob_2);
				if (result_tRunJob_2 != 0) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_2.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_2
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_2.toString());

				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 process_data_begin ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_2 process_data_end ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ControlJobs ControlJobsClass = new ControlJobs();

		int exitCode = ControlJobsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ControlJobs.class.getClassLoader()
					.getResourceAsStream("dw_training/controljobs_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ControlJobs.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tRunJob_3Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tRunJob_3) {
					globalMap.put("tRunJob_3_SUBPROCESS_STATE", -1);

					e_tRunJob_3.printStackTrace();

				} catch (java.lang.Error e_tRunJob_3) {
					globalMap.put("tRunJob_3_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tRunJob_3;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ControlJobs");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
		String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
		if (localErrorCode != null) {
			if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
				errorCode = localErrorCode;
			}
		}
		if (localStatus != null && !status.equals("failure")) {
			status = localStatus;
		}

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 88746 characters generated by Talend Open Studio for Data Integration on the
 * November 30, 2022 at 4:40:44 PM CET
 ************************************************************************************************/